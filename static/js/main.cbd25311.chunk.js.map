{"version":3,"sources":["components/winner/winner.js","components/game/game-field.js","components/game/game.js","components/info/info.js","components/button/index.js","components/button/button.js","components/buttons/buttons.js","components/app/index.js","components/app/app.js","index.js"],"names":["Winner","message","this","props","winner","react_default","a","createElement","className","React","Component","GameField","generateKey","Math","floor","random","_this2","_this$props","field","gameField","map","row","rowIndex","key","cell","cellIndex","game_field_Cell","cellData","playerMove","coords","Cell","_ref","winSequence","onClick","GamePlay","state","fieldSize","countMoves","gameRestart","_this","setState","fieldRender","createGameField","restartEnd","i","j","push","EmptyCell","BorderCell","isItStep","newField","Object","toConsumableArray","Step","calculateNextMove","changeCountMoves","pcMove","testWin","_this$state","tempCell","searchPotencialIntersections","item","type","isItBorder","isItEmpty","getArrayNearCells","forEach","neighbour","namberDirection","isHaveSameType","recalculationPotencialRelatedCells","oppositeSides","stepPotential","_ref2","y","x","coordsForMove","calculateCellPotential","slice","_this$state2","resField","_loop","direction","nextCell","value1","value2","max","findMax","arr","col","colIndex","oneLineMatch","count","array","neighbours","getNearCell","concat","_this$state3","copyField","console","log","win","markWin","prevProps","prevState","restart","_ref3","_this$state4","findCrossesNeighbour","nearCell","res","setWinner","_this$state5","game_field_GameField","moves","classCallCheck","Info","playerWin","playerLose","winMessage","winner_Winner","Button","textButton","ButtonContinue","components_button","App","game","game_GamePlay","info","info_Info","buttons_ButtonContinue","ReactDOM","render","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.cbd25311.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Winner extends React.Component{\r\n    render() {\r\n        const {winner} = this.props;\r\n        const message = 'You are win!'+winner;\r\n        return(\r\n            <div className=\"\">\r\n                <div className=\"info winner\">\r\n                    <div className=\"info__block\">\r\n                        <div className=\"info__title\">{message}</div>\r\n                        <div className=\"info__content\"><button className=\"winner__button info__button-restart\">\r\n                            continue\r\n                        </button></div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import './game-field.scss';\r\nimport React from \"react\";\r\nimport GamePlay from \"./game\";\r\nimport Winner from \"../winner/winner\";\r\n\r\nexport default class GameField extends React.Component {\r\n\r\n\r\n    generateKey = () => Math.floor(Math.random() * 1000000);\r\n\r\n    render() {\r\n        const {field, winner} = this.props;\r\n\r\n        if (field === null) return null;\r\n        const winNotification = winner ? <h1>You win!{winner}</h1> : null;\r\n\r\n        const gameField = field.map((row, rowIndex) => {\r\n            return <tr className=\"game-field_row\"\r\n                       key={this.generateKey()}>\r\n                {row.map((cell, cellIndex) => {\r\n                        return <Cell\r\n                            cellData={cell}\r\n                            playerMove={this.props.playerMove}\r\n                            coords={{rowIndex, cellIndex}}\r\n                            key={this.generateKey()}\r\n                        />\r\n                    }\r\n\r\n                )}</tr>\r\n        });\r\n\r\n        return (\r\n\r\n                <div className=\" col-lg-7  col-md-12\">\r\n                    <table className=\"game-field\">\r\n                        <tbody>\r\n                        {gameField}\r\n                        </tbody>\r\n                    </table>\r\n\r\n\r\n                </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst Cell = ({cellData, playerMove, coords,winSequence}) => {\r\n    // const isInSequence = ({rowIndex, cellIndex}) => {\r\n    //     winSequence.forEach( (winCell) => {\r\n    //         if ()\r\n    //     })\r\n    // }\r\n    return <td className=\"game-field__cell\"\r\n               onClick={() => playerMove(coords)}>\r\n        {cellData}\r\n    </td>\r\n}","import React from \"react\";\r\nimport GameField from \"./game-field\";\r\n\r\nexport default class GamePlay extends React.Component {\r\n    state = {\r\n        field: null,\r\n        fieldSize: 12,\r\n        countMoves: 0,\r\n        winner:null,\r\n        winSequence: []\r\n\r\n    };\r\n\r\n    gameRestart = () => {\r\n        this.setState({\r\n            field: null,\r\n            fieldRender: [],\r\n            fieldSize: 12,\r\n            countMoves: 0,\r\n            winner:null,\r\n            winSequence: []\r\n        })\r\n        this.createGameField();\r\n        this.props.restartEnd();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.createGameField();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if (prevProps.restart === false && this.props.restart === true) {\r\n            this.gameRestart();\r\n        }\r\n        console.log(prevProps, prevState);\r\n        console.log(this.props.restart);\r\n    }\r\n\r\n\r\n    createGameField = () => {\r\n        const {fieldSize} = this.state;\r\n        const field = [];\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                field[i].push(new EmptyCell(i, j));\r\n            }\r\n        }\r\n        //create border\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[0][i] = new BorderCell();\r\n            field[i][0] = new BorderCell();\r\n            field[fieldSize + 1][i] = new BorderCell();\r\n            field[i][fieldSize + 1] = new BorderCell();\r\n        }\r\n        this.setState({field});\r\n    };\r\n\r\n\r\n    playerMove = ({rowIndex, cellIndex}) => {\r\n        const {field} = this.state;\r\n        if (!this.isItStep(field[rowIndex + 1][cellIndex + 1])) {\r\n            const newField = [...field];\r\n            newField[rowIndex + 1][cellIndex + 1] = new Step('player', cellIndex + 1, rowIndex + 1);\r\n\r\n            this.setState({\r\n                field: newField,\r\n\r\n            });\r\n\r\n\r\n            for (let i = 0; i < 4; i++) {\r\n                this.calculateNextMove();\r\n            }\r\n            ;\r\n            this.props.changeCountMoves();\r\n            this.pcMove();\r\n            this.testWin('player');\r\n        }\r\n\r\n\r\n    };\r\n\r\n    calculateNextMove = () => {\r\n        const {fieldSize, field} = this.state;\r\n\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const tempCell = field[i][j]\r\n                if (this.isItStep(tempCell)) {\r\n                    this.searchPotencialIntersections(tempCell)\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    isItStep = (item) => {\r\n        if (item.type !== ('emptyCell' || 'border')) return true;\r\n\r\n        return false;\r\n    };\r\n\r\n    isItBorder = (item) => {\r\n        if (item.type === 'border') return true;\r\n\r\n        return false;\r\n    };\r\n\r\n    isItEmpty = (item) =>{\r\n        if (item.type === 'emptyCell') return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    searchPotencialIntersections = (cell) => {\r\n        const {field} = this.state;\r\n        const nearCells = this.getArrayNearCells(cell);\r\n        nearCells.forEach((neighbour, namberDirection) => {\r\n            if (this.isItStep(neighbour)) {\r\n                if (this.isHaveSameType(cell, neighbour)||this.isItBorder(neighbour)) {\r\n                    this.recalculationPotencialRelatedCells(cell, neighbour, namberDirection)\r\n                }\r\n            }\r\n        })\r\n\r\n    };\r\n\r\n    recalculationPotencialRelatedCells = (cell, neighbour, namberDirection) => {\r\n        const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n        const num = cell.stepPotential[namberDirection];\r\n        neighbour.stepPotential[namberDirection] += cell.stepPotential[namberDirection];\r\n        cell.stepPotential[oppositeSides[namberDirection]] += neighbour.stepPotential[oppositeSides[namberDirection]];\r\n        cell.stepPotential[namberDirection] = 0;\r\n        neighbour.stepPotential[oppositeSides[namberDirection]] = 0;\r\n\r\n    }\r\n\r\n    isHaveSameType = (cell, neighbour) => {\r\n        if (cell.type === neighbour.type && !this.isItEmpty(cell) && !this.isItEmpty(neighbour)) return true\r\n        else return false;\r\n    };\r\n\r\n    getArrayNearCells = ({y, x}) => {\r\n\r\n        const {field} = this.state;\r\n        return [\r\n            field[y - 1][x], field[y - 1][x + 1],\r\n            field[y][x + 1], field[y + 1][x + 1],\r\n            field[y + 1][x], field[y + 1][x - 1],\r\n            field[y][x - 1], field[y - 1][x - 1]\r\n        ]\r\n    };\r\n\r\n    getNearCell({x, y}, direction) {\r\n        const {field} = this.state;\r\n        switch (direction) {\r\n            case 0:\r\n                return field[y - 1][x];\r\n                break;\r\n            case 1:\r\n                return field[y - 1][x + 1];\r\n                break;\r\n            case 2:\r\n                return field[y][x + 1];\r\n                break;\r\n            case 3:\r\n                return field[y + 1][x + 1];\r\n                break;\r\n            case 4:\r\n                return field[y + 1][x];\r\n                break;\r\n            case 5:\r\n                return field[y + 1][x - 1];\r\n                break;\r\n            case 6:\r\n                return field[y][x - 1];\r\n                break;\r\n            case 7:\r\n                return field[y - 1][x - 1];\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    //there is methods for calculation next move for pc\r\n    pcMove = () => {\r\n        const {field} = this.state;\r\n        const coordsForMove = this.calculateCellPotential('player');\r\n        const newField = field.slice();\r\n        field[coordsForMove.y][coordsForMove.x] = new Step('pc', coordsForMove.x, coordsForMove.y);\r\n        this.setState({})\r\n        // const pcPotential = this.calculateCellPotential('pc');\r\n    };\r\n\r\n    calculateCellPotential = (type) => {\r\n        const {fieldSize, field} = this.state;\r\n\r\n        //create array for cell potential for move\r\n        const resField = [];\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            resField[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                resField[i].push(0);\r\n            }\r\n        }\r\n\r\n        // console.log('это тот самый массив',resField);\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const cell = field[i][j]; //temp cell\r\n\r\n                if (this.isItStep(cell) && cell.type === type) {\r\n                    const nearCells = this.getArrayNearCells(cell);\r\n\r\n                    nearCells.forEach((neighbour, direction) => {\r\n                        if (!this.isItStep(neighbour) && !this.isItBorder(neighbour)) {\r\n\r\n                            //for cells that may intersect in the future\r\n                            const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n                            const nextNearCells = this.getArrayNearCells(neighbour);\r\n                            const nextCell = nextNearCells[direction];\r\n                            const value1 = cell.stepPotential[direction];\r\n                            let value2 = 0;\r\n                            if (this.isItStep(nextCell) && !this.isItBorder(nextCell)) {\r\n                                value2 = nextCell.stepPotential[oppositeSides[direction]]\r\n                            }\r\n                            resField[neighbour.y][neighbour.x] = Math.max(resField[neighbour.y][neighbour.x], value1 + value2);\r\n                        }\r\n\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        // return {x:1, y:2}\r\n        return this.findMax(resField);\r\n    };\r\n\r\n    findSumPotintialNearCells(cell) {\r\n\r\n    }\r\n\r\n    findMax = (arr) => {\r\n        const {fieldSize} = this.state;\r\n\r\n        let max = 0;\r\n        let coords = {};\r\n        arr.forEach((row, rowIndex) => row.forEach((col, colIndex) => {\r\n            if (col > max) {\r\n                max = col;\r\n                coords = {y: rowIndex, x: colIndex};\r\n            }\r\n        }));\r\n        return coords;\r\n    };\r\n\r\n    testWin(type) {\r\n        const {field, fieldSize} = this.state;\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                this.findCrossesNeighbour(field[i][j]);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    findCrossesNeighbour(cell) {\r\n        const neighbours = this.getArrayNearCells(cell);\r\n        neighbours.forEach((nearCell, direction) => {\r\n\r\n            if (this.isHaveSameType(cell,nearCell)) {\r\n                console.log(cell.type,nearCell.type);\r\n                console.log(nearCell,direction,2,[cell,nearCell]);\r\n                let res = this.oneLineMatch(nearCell,direction,2,[cell,nearCell]);\r\n                if (res) {\r\n                    this.setState({\r\n                        winner: res[0].type,\r\n                        winSequence: res\r\n                    })\r\n                    console.log(this.state.win);\r\n                    this.props.setWinner(res[0].type);\r\n                }\r\n            }\r\n\r\n        })\r\n\r\n    };\r\n\r\n    oneLineMatch = (cell, direction, count, array) => {\r\n\r\n        if (count === 5) {return array}\r\n        else {\r\n            const neighbours = this.getNearCell(cell, direction);\r\n            if (!this.isHaveSameType(cell, neighbours)) {return null};\r\n            return this.oneLineMatch(neighbours, direction, count + 1, [...array,neighbours]);\r\n\r\n        }\r\n    }\r\n\r\n    //generate array of game field with values for correct render\r\n    fieldRender = () => {\r\n        const {field, fieldSize,winSequence} = this.state;\r\n        if (!field) return [];\r\n        //mark win sequence\r\n        const copyField = field.slice();\r\n        // console.log(copyField);\r\n\r\n        winSequence.forEach( (item) => {\r\n            console.log('hah',copyField[item.y][item.x].win);\r\n            copyField[item.y][item.x].win =true;\r\n\r\n        });\r\n\r\n\r\n        const newField = [];\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            newField[i - 1] = [];\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const item = copyField [i][j];\r\n                const markWin = item.win? 'mark-win' : null;\r\n                if (!this.isItStep(item)) newField[i - 1].push(' ');\r\n                else {\r\n                    if (item.type === 'player') newField[i - 1].push(<i className={`fa fa-times ${markWin}`}></i>)\r\n                    else newField[i - 1].push(<i className={`fa fa-circle-o ${markWin}`}></i>)\r\n                }\r\n            }\r\n        }\r\n\r\n        // winSequence.forEach( (item) => {\r\n        //     console.log('hah',newField[item.y-1][item.x-1]);\r\n        //     newField[item.y-1][item.x-1].className.add('markWin');\r\n        //\r\n        // });\r\n        return newField;\r\n        // return field.map((row) => row.map(\r\n        //     (item) => {\r\n        //\r\n        //         if (typeof item === 'number')  return ' '\r\n        //         else {\r\n        //             if (item.type === 'player') return <i className=\"fa fa-times\"></i>\r\n        //             else return <i className=\"fa fa-circle-o\"></i>\r\n        //         }\r\n        // }));\r\n\r\n    }\r\n\r\n    render() {\r\n        const {countMoves,winner,winSequence} = this.state;\r\n        const {setWinner} = this.props;\r\n\r\n        return (\r\n            <GameField field={this.fieldRender()}\r\n                       playerMove={this.playerMove}\r\n                       moves={countMoves}\r\n                       winner = {winner}\r\n                       />\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n//contanes info about step player or pc\r\nclass Step {\r\n    constructor(type, x, y) {\r\n        this.type = type;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    stepPotential = [1, 1, 1, 1, 1, 1, 1, 1]; // 8 directions\r\n    type = null;\r\n    x = null;\r\n    y = null;\r\n    win = false;\r\n}\r\n\r\nclass BorderCell {\r\n    type = 'border';\r\n    stepPotential = [-1, -1, -1, -1, -1, -1, -1, -1];\r\n};\r\n\r\nclass EmptyCell {\r\n    constructor(y, x) {\r\n        this.y = y;\r\n        this.x = x;\r\n    }\r\n\r\n    type = 'emptyCell';\r\n    x = null;\r\n    y = null;\r\n\r\n}\r\n\r\n","import './info.scss';\r\nimport React from \"react\";\r\nimport Winner from \"../winner/winner\";\r\n\r\nexport default class Info extends React.Component {\r\n    state = {\r\n        moves: 0,\r\n\r\n    }\r\n\r\n    render() {\r\n        const {restart,countMoves,playerWin,playerLose,winner} = this.props;\r\n\r\n        const winMessage = winner? <Winner winner={winner}/> : null;\r\n        return (\r\n            <div className='col-lg-4  col-md-12'>\r\n\r\n                {winMessage}\r\n\r\n                <button className=\"info__button-restart\"\r\n                        onClick={() => restart()}>Restart <i className=\"fa fa-refresh\"></i></button>\r\n\r\n                <div className=\"info__stats\">\r\n                    <div className=\"info\">\r\n                        <div className=\"info__block\">\r\n                            <div className=\"info__title\">Moves</div>\r\n                            <div className=\"info__content\">{this.props.moves}</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"info\">\r\n                        <div className=\"info__block\">\r\n                            <div className=\"info__title\">Score</div>\r\n                            <div className=\"info__content\">{playerWin} : {playerLose}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"info info--rules\">\r\n                    <div className=\"info__block\">\r\n                        <div className=\"info__title\">Rules</div>\r\n                        <div className=\"info__content\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam\r\n                            asperiores at commodi, delectus dolores maiores molestiae officia. Adipisci assumenda\r\n                            explicabo facere fugiat fugit labore necessitatibus omnis quaerat sed tenetur, velit!\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import Button from './button';\r\n\r\nexport default Button;","import React from \"react\";\r\nimport './button.scss';\r\n\r\nconst Button = ({textButton}) => {\r\n\r\n    return (\r\n        <button className=\"button\">\r\n            {textButton}\r\n        </button>\r\n\r\n    )\r\n};\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"../button\";\r\n\r\nconst ButtonContinue = () => {\r\n    return(\r\n        <Button textButton=\"Continue\"/>\r\n    )\r\n};\r\n\r\nconst ButtonRestart = () => {\r\n    return(\r\n        <Button textButton=\"Continue\"/>\r\n    )\r\n};\r\n\r\nexport {ButtonContinue};","import App from './app';\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport './app.scss';\r\nimport '../game/game'\r\nimport Game from \"../game/game\";\r\nimport Info from \"../info/info\";\r\nimport Button from \"../button/button\";\r\nimport {ButtonContinue} from \"../buttons/buttons\";\r\n\r\nexport default class App extends React.Component {\r\n    state = {\r\n        countMoves: 0,\r\n        playerWin: 0,\r\n        playerLose: 0,\r\n        winner: null,\r\n        restart: false\r\n    };\r\n\r\n    changeCountMoves = () => {\r\n        this.setState((state) => ({\r\n            countMoves: state.countMoves + 1\r\n        }))\r\n    };\r\n\r\n\r\n    restart = () => {\r\n        this.setState({\r\n            countMoves: 0,\r\n            playerWin: 0,\r\n            playerLose: 0,\r\n            restart:true\r\n        });\r\n\r\n    };\r\n\r\n    restartEnd = () => {\r\n        this.setState({restart:false})\r\n    }\r\n\r\n    setWinner = (win) => {\r\n        this.setState({\r\n            winner: win\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const {countMoves, playerWin, playerLose, winner,restart} = this.state;\r\n        const game = <Game changeCountMoves={this.changeCountMoves}\r\n                           setWinner = {this.setWinner}\r\n                            restart = {restart}\r\n                            restartEnd = {this.restartEnd}/>;\r\n        const info = <Info moves={countMoves}\r\n                           playerWin={playerWin}\r\n                           playerLose={playerLose}\r\n                           winner={winner}\r\n                           restart={this.restart }/>\r\n        return (\r\n            <div className=\"container\">\r\n                <ButtonContinue/>\r\n                <div className=\"row \">\r\n                    <h1 className='title col-lg-1'>TicTacToy</h1>\r\n                </div>\r\n\r\n                <div className=\"row justify-content-center\">\r\n                    {game}\r\n                    {info}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}