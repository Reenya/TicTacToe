{"version":3,"sources":["../../../tic-tac-toe/src/components/game-field/game-field.js","../../../tic-tac-toe/src/components/game-field/game.js","../../../tic-tac-toe/src/components/app/index.js","../../../tic-tac-toe/src/components/app/app.js","../../../tic-tac-toe/src/index.js"],"names":["GameField","generateKey","Math","floor","random","lastState","_this2","this","field","props","gameField","map","row","rowIndex","react_default","a","createElement","className","key","cell","cellIndex","game_field_Cell","cellData","playerMove","coords","Fragment","React","Component","Cell","_ref","onClick","GamePlay","state","fieldRender","fieldSize","createGameField","_this","i","j","push","EmptyCell","BorderCell","setState","newField","Object","toConsumableArray","Step","calculateNextMove","pcMove","_this$state","tempCell","isItStep","searchPotencialIntersections","item","type","isItBorder","getArrayNearCells","forEach","neighbour","namberDirection","isHaveSameType","recalculationPotencialRelatedCells","oppositeSides","stepPotential","y","x","coordsForMove","calculateCellPotential","slice","console","log","_this$state2","resField","_loop","direction","nextCell","value1","value2","max","findMax","arr","col","colIndex","_this$state3","game_field_GameField","classCallCheck","App","game_GamePlay","ReactDOM","render","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.46f84e85.chunk.js","sourcesContent":["import './game-field.scss';\r\nimport React from \"react\";\r\nimport GamePlay from \"./game\";\r\n\r\nexport default class GameField extends React.Component {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(lastState) {\r\n    }\r\n\r\n    generateKey = () => Math.floor(Math.random()*1000000);\r\n\r\n    render() {\r\n        const {field} = this.props;\r\n        if (field === null) return null;\r\n\r\n        const gameField = field.map((row, rowIndex) => {\r\n            return <tr className=\"game-field_row table-dark\"\r\n            key={this.generateKey()}>{row.map((cell, cellIndex) =>\r\n                <Cell\r\n                    cellData={cell}\r\n                    playerMove={this.props.playerMove}\r\n                    coords={{rowIndex, cellIndex}}\r\n                    key={this.generateKey()}/>)}</tr>\r\n        })\r\n\r\n        return <React.Fragment>{gameField}</React.Fragment>\r\n\r\n    }\r\n}\r\n\r\nconst Cell = ({cellData, playerMove, coords}) => {\r\n    return <td className=\"game-field__cell\"\r\n               onClick={() => playerMove(coords)}>\r\n        {cellData}\r\n    </td>\r\n}","import React from \"react\";\r\nimport GameField from \"./game-field\";\r\n\r\nexport default class GamePlay extends React.Component {\r\n    state = {\r\n        field: null,\r\n        fieldRender: [],\r\n        fieldSize: 12\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.createGameField();\r\n    }\r\n\r\n\r\n    createGameField = () => {\r\n        const {fieldSize} = this.state;\r\n        const field = [];\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                field[i].push(new EmptyCell(i,j));\r\n            }\r\n        }\r\n        //create border\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[0][i] = new BorderCell();\r\n            field[i][0] = new BorderCell();\r\n            field[fieldSize + 1][i] = new BorderCell();\r\n            field[i][fieldSize + 1] = new BorderCell();\r\n        }\r\n        this.setState({field});\r\n        this.fieldRender();\r\n        return field;\r\n    };\r\n\r\n\r\n    playerMove = ({rowIndex, cellIndex}) => {\r\n        const newField = [...this.state.field];\r\n        newField[rowIndex + 1][cellIndex + 1] = new Step('player', cellIndex + 1, rowIndex + 1);\r\n\r\n        this.setState({\r\n            field: newField\r\n        });\r\n        for (let i = 0;i<4;i++){\r\n            this.calculateNextMove();\r\n        }\r\n\r\n        this.pcMove();\r\n\r\n\r\n    };\r\n\r\n    calculateNextMove = () => {\r\n        const {fieldSize, field} = this.state;\r\n\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const tempCell = field[i][j]\r\n                if (this.isItStep(tempCell)) {\r\n                    this.searchPotencialIntersections(tempCell)\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    isItStep = (item) => {\r\n        if (item.type !== ('emptyCell') ) return true;\r\n\r\n        return false;\r\n    };\r\n\r\n    isItBorder = (item) =>{\r\n        if (item.type === 'border' ) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    searchPotencialIntersections = (cell) => {\r\n        const {field} = this.state;\r\n        const nearCells = this.getArrayNearCells(cell);\r\n        nearCells.forEach((neighbour, namberDirection) => {\r\n            if (this.isItStep(neighbour)) {\r\n                if (this.isHaveSameType(cell, neighbour)) {\r\n                    this.recalculationPotencialRelatedCells(cell, neighbour, namberDirection)\r\n                }\r\n            }\r\n        })\r\n\r\n    };\r\n\r\n    recalculationPotencialRelatedCells = (cell, neighbour, namberDirection) => {\r\n        const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n        const num = cell.stepPotential[namberDirection];\r\n        neighbour.stepPotential[namberDirection] += cell.stepPotential[namberDirection];\r\n        cell.stepPotential[oppositeSides[namberDirection]] += neighbour.stepPotential[oppositeSides[namberDirection]];\r\n        cell.stepPotential[namberDirection] = 0;\r\n        neighbour.stepPotential[oppositeSides[namberDirection]] = 0;\r\n\r\n    }\r\n\r\n    isHaveSameType = (cell, neighbour) => {\r\n        if (cell.type === neighbour.type || neighbour.type === 'border') return true\r\n        else return false;\r\n    };\r\n\r\n    getArrayNearCells = (cell) => {\r\n\r\n        const {field} = this.state;\r\n        return [\r\n            field[cell.y - 1][cell.x], field[cell.y - 1][cell.x + 1],\r\n            field[cell.y][cell.x + 1], field[cell.y + 1][cell.x + 1],\r\n            field[cell.y + 1][cell.x], field[cell.y + 1][cell.x - 1],\r\n            field[cell.y][cell.x - 1], field[cell.y - 1][cell.x - 1]\r\n        ]\r\n    }\r\n\r\n\r\n    //there is methods for calculation next move for pc\r\n    pcMove = () => {\r\n        const {field} = this.state;\r\n        const coordsForMove = this.calculateCellPotential('player');\r\n        const newField = field.slice();\r\n        field[coordsForMove.y][coordsForMove.x] = new Step('pc',coordsForMove.x,coordsForMove.y);\r\n        console.log(newField);\r\n        this.setState({\r\n\r\n        })\r\n        // const pcPotential = this.calculateCellPotential('pc');\r\n    };\r\n\r\n    calculateCellPotential = (type) => {\r\n        const {fieldSize, field} = this.state;\r\n\r\n        //create array for cell potential for move\r\n        const resField = [];\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            resField[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                resField[i].push(0);\r\n            }\r\n        }\r\n\r\n        // console.log('это тот самый массив',resField);\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const cell = field[i][j]; //temp cell\r\n\r\n                if (this.isItStep(cell) && cell.type === type) {\r\n                    const nearCells = this.getArrayNearCells(cell);\r\n\r\n                    nearCells.forEach( (neighbour,direction ) => {\r\n                        if (!this.isItStep(neighbour) && !this.isItBorder(neighbour)) {\r\n\r\n                            //for cells that may intersect in the future\r\n                            const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n                            const nextNearCells = this.getArrayNearCells(neighbour);\r\n                            const nextCell = nextNearCells[direction];\r\n                            const value1 = cell.stepPotential[direction];\r\n                            let value2 = 0;\r\n                            if (this.isItStep(nextCell) && !this.isItBorder(nextCell)) {\r\n                                value2 = nextCell.stepPotential[oppositeSides[direction]]\r\n                            }\r\n                            resField[neighbour.y][neighbour.x] = Math.max(resField[neighbour.y][neighbour.x],value1+value2);\r\n                        }\r\n\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        // return {x:1, y:2}\r\n         return this.findMax(resField);\r\n    };\r\n\r\n    findSumPotintialNearCells(cell){\r\n\r\n    }\r\n\r\n    findMax = (arr) => {\r\n        const {fieldSize} = this.state;\r\n\r\n        let max = 0;\r\n        let coords = {};\r\n        arr.forEach( (row,rowIndex) => row.forEach( (col,colIndex) => {\r\n            if (col > max) {\r\n                max = col;\r\n                coords = {y: rowIndex, x: colIndex};\r\n            }\r\n        }));\r\n\r\n        console.log(max,coords);\r\n        return coords;\r\n    }\r\n\r\n    //generate array of game field with values for correct render\r\n    fieldRender = () => {\r\n        const {field, fieldRender, fieldSize} = this.state;\r\n\r\n        if (!field) return [];\r\n        const newField = [];\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            newField[i - 1] = [];\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const item = field [i][j];\r\n                if (!this.isItStep(item)) newField[i - 1].push(' ');\r\n                else {\r\n                    if (item.type === 'player') newField[i - 1].push(<i className=\"fa fa-times\"></i>)\r\n                    else newField[i - 1].push(<i className=\"fa fa-circle-o\"></i>)\r\n                }\r\n            }\r\n        }\r\n        return newField;\r\n        // return field.map((row) => row.map(\r\n        //     (item) => {\r\n        //\r\n        //         if (typeof item === 'number')  return ' '\r\n        //         else {\r\n        //             if (item.type === 'player') return <i className=\"fa fa-times\"></i>\r\n        //             else return <i className=\"fa fa-circle-o\"></i>\r\n        //         }\r\n        // }));\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <GameField field={this.fieldRender()} playerMove={this.playerMove}/>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n//contanes info about step player or pc\r\nclass Step {\r\n    constructor(type, x, y) {\r\n        this.type = type;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    stepPotential = [1, 1, 1, 1, 1, 1, 1, 1]; // 8 directions\r\n    type = null;\r\n    x = null;\r\n    y = null;\r\n}\r\n\r\nclass BorderCell {\r\n    type = 'border';\r\n    stepPotential = [-1, -1, -1, -1, -1, -1, -1, -1];\r\n};\r\n\r\nclass EmptyCell {\r\n    constructor(y,x){\r\n        this.y = y;\r\n        this.x = x;\r\n    }\r\n    type =  'emptyCell';\r\n    x =  null;\r\n    y =  null;\r\n\r\n}\r\n\r\n","import App from './app';\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport './app.scss';\r\nimport '../game-field/game'\r\nimport Game from \"../game-field/game\";\r\n\r\nexport default class App extends React.Component{\r\n    render(){\r\n        return (\r\n            <div className=\"container\">\r\n                <h1 className='title'>TicTacToy</h1>\r\n\r\n                <table  className=\"game-field table\">\r\n                    <tbody>\r\n                    <Game/>\r\n                    </tbody>\r\n\r\n                </table>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}