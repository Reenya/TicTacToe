{"version":3,"sources":["components/winner/winner.js","components/game/game-field.js","components/game/game.js","components/info/info.js","components/app/index.js","components/app/app.js","index.js"],"names":["Winner","message","this","props","winner","react_default","a","createElement","className","React","Component","GameField","generateKey","Math","floor","random","_this2","_this$props","field","gameField","map","row","rowIndex","key","cell","cellIndex","game_field_Cell","cellData","playerMove","coords","Cell","_ref","winSequence","onClick","GamePlay","state","fieldRender","fieldSize","countMoves","createGameField","_this","i","j","push","EmptyCell","BorderCell","setState","isItStep","newField","Object","toConsumableArray","Step","calculateNextMove","changeCountMoves","pcMove","testWin","_this$state","tempCell","searchPotencialIntersections","item","type","isItBorder","isItEmpty","getArrayNearCells","forEach","neighbour","namberDirection","isHaveSameType","recalculationPotencialRelatedCells","oppositeSides","stepPotential","_ref2","y","x","coordsForMove","calculateCellPotential","slice","_this$state2","resField","_loop","direction","nextCell","value1","value2","max","findMax","arr","col","colIndex","oneLineMatch","count","array","neighbours","getNearCell","concat","_this$state3","copyField","console","log","win","markWin","_ref3","_this$state4","findCrossesNeighbour","nearCell","res","setWinner","_this$state5","game_field_GameField","moves","classCallCheck","Info","restart","playerWin","playerLose","winMessage","winner_Winner","App","game","game_GamePlay","info_Info","ReactDOM","render","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.6541dc94.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Winner extends React.Component{\r\n    render() {\r\n        const {winner} = this.props;\r\n        const message = 'You are win!'+winner;\r\n        return(\r\n            <div className=\"\">\r\n                <div className=\"info winner\">\r\n                    <div className=\"info__block\">\r\n                        <div className=\"info__title\">{message}</div>\r\n                        <div className=\"info__content\"><button className=\"winner__button info__button-restart\">\r\n                            continue\r\n                        </button></div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import './game-field.scss';\r\nimport React from \"react\";\r\nimport GamePlay from \"./game\";\r\nimport Winner from \"../winner/winner\";\r\n\r\nexport default class GameField extends React.Component {\r\n\r\n\r\n    generateKey = () => Math.floor(Math.random() * 1000000);\r\n\r\n    render() {\r\n        const {field, winner} = this.props;\r\n\r\n        if (field === null) return null;\r\n        const winNotification = winner ? <h1>You win!{winner}</h1> : null;\r\n\r\n        const gameField = field.map((row, rowIndex) => {\r\n            return <tr className=\"game-field_row\"\r\n                       key={this.generateKey()}>\r\n                {row.map((cell, cellIndex) => {\r\n                        return <Cell\r\n                            cellData={cell}\r\n                            playerMove={this.props.playerMove}\r\n                            coords={{rowIndex, cellIndex}}\r\n                            key={this.generateKey()}\r\n                        />\r\n                    }\r\n\r\n                )}</tr>\r\n        });\r\n\r\n        return (\r\n\r\n                <div className=\" col-lg-7  col-md-12\">\r\n                    <table className=\"game-field\">\r\n                        <tbody>\r\n                        {gameField}\r\n                        </tbody>\r\n                    </table>\r\n\r\n\r\n                </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst Cell = ({cellData, playerMove, coords,winSequence}) => {\r\n    // const isInSequence = ({rowIndex, cellIndex}) => {\r\n    //     winSequence.forEach( (winCell) => {\r\n    //         if ()\r\n    //     })\r\n    // }\r\n    return <td className=\"game-field__cell\"\r\n               onClick={() => playerMove(coords)}>\r\n        {cellData}\r\n    </td>\r\n}","import React from \"react\";\r\nimport GameField from \"./game-field\";\r\n\r\nexport default class GamePlay extends React.Component {\r\n    state = {\r\n        field: null,\r\n        fieldRender: [],\r\n        fieldSize: 12,\r\n        countMoves: 0,\r\n        winner:null,\r\n        winSequence: []\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.createGameField();\r\n    }\r\n\r\n\r\n    createGameField = () => {\r\n        const {fieldSize} = this.state;\r\n        const field = [];\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                field[i].push(new EmptyCell(i, j));\r\n            }\r\n        }\r\n        //create border\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[0][i] = new BorderCell();\r\n            field[i][0] = new BorderCell();\r\n            field[fieldSize + 1][i] = new BorderCell();\r\n            field[i][fieldSize + 1] = new BorderCell();\r\n        }\r\n        this.setState({field});\r\n    };\r\n\r\n\r\n    playerMove = ({rowIndex, cellIndex}) => {\r\n        const {field} = this.state;\r\n        if (!this.isItStep(field[rowIndex + 1][cellIndex + 1])) {\r\n            const newField = [...field];\r\n            newField[rowIndex + 1][cellIndex + 1] = new Step('player', cellIndex + 1, rowIndex + 1);\r\n\r\n            this.setState({\r\n                field: newField,\r\n\r\n            });\r\n\r\n\r\n            for (let i = 0; i < 4; i++) {\r\n                this.calculateNextMove();\r\n            }\r\n            ;\r\n            this.props.changeCountMoves();\r\n            this.pcMove();\r\n            this.testWin('player');\r\n        }\r\n\r\n\r\n    };\r\n\r\n    calculateNextMove = () => {\r\n        const {fieldSize, field} = this.state;\r\n\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const tempCell = field[i][j]\r\n                if (this.isItStep(tempCell)) {\r\n                    this.searchPotencialIntersections(tempCell)\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    isItStep = (item) => {\r\n        if (item.type !== ('emptyCell' || 'border')) return true;\r\n\r\n        return false;\r\n    };\r\n\r\n    isItBorder = (item) => {\r\n        if (item.type === 'border') return true;\r\n\r\n        return false;\r\n    };\r\n\r\n    isItEmpty = (item) =>{\r\n        if (item.type === 'emptyCell') return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    searchPotencialIntersections = (cell) => {\r\n        const {field} = this.state;\r\n        const nearCells = this.getArrayNearCells(cell);\r\n        nearCells.forEach((neighbour, namberDirection) => {\r\n            if (this.isItStep(neighbour)) {\r\n                if (this.isHaveSameType(cell, neighbour)||this.isItBorder(neighbour)) {\r\n                    this.recalculationPotencialRelatedCells(cell, neighbour, namberDirection)\r\n                }\r\n            }\r\n        })\r\n\r\n    };\r\n\r\n    recalculationPotencialRelatedCells = (cell, neighbour, namberDirection) => {\r\n        const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n        const num = cell.stepPotential[namberDirection];\r\n        neighbour.stepPotential[namberDirection] += cell.stepPotential[namberDirection];\r\n        cell.stepPotential[oppositeSides[namberDirection]] += neighbour.stepPotential[oppositeSides[namberDirection]];\r\n        cell.stepPotential[namberDirection] = 0;\r\n        neighbour.stepPotential[oppositeSides[namberDirection]] = 0;\r\n\r\n    }\r\n\r\n    isHaveSameType = (cell, neighbour) => {\r\n        if (cell.type === neighbour.type && !this.isItEmpty(cell) && !this.isItEmpty(neighbour)) return true\r\n        else return false;\r\n    };\r\n\r\n    getArrayNearCells = ({y, x}) => {\r\n\r\n        const {field} = this.state;\r\n        return [\r\n            field[y - 1][x], field[y - 1][x + 1],\r\n            field[y][x + 1], field[y + 1][x + 1],\r\n            field[y + 1][x], field[y + 1][x - 1],\r\n            field[y][x - 1], field[y - 1][x - 1]\r\n        ]\r\n    };\r\n\r\n    getNearCell({x, y}, direction) {\r\n        const {field} = this.state;\r\n        switch (direction) {\r\n            case 0:\r\n                return field[y - 1][x];\r\n                break;\r\n            case 1:\r\n                return field[y - 1][x + 1];\r\n                break;\r\n            case 2:\r\n                return field[y][x + 1];\r\n                break;\r\n            case 3:\r\n                return field[y + 1][x + 1];\r\n                break;\r\n            case 4:\r\n                return field[y + 1][x];\r\n                break;\r\n            case 5:\r\n                return field[y + 1][x - 1];\r\n                break;\r\n            case 6:\r\n                return field[y][x - 1];\r\n                break;\r\n            case 7:\r\n                return field[y - 1][x - 1];\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    //there is methods for calculation next move for pc\r\n    pcMove = () => {\r\n        const {field} = this.state;\r\n        const coordsForMove = this.calculateCellPotential('player');\r\n        const newField = field.slice();\r\n        field[coordsForMove.y][coordsForMove.x] = new Step('pc', coordsForMove.x, coordsForMove.y);\r\n        this.setState({})\r\n        // const pcPotential = this.calculateCellPotential('pc');\r\n    };\r\n\r\n    calculateCellPotential = (type) => {\r\n        const {fieldSize, field} = this.state;\r\n\r\n        //create array for cell potential for move\r\n        const resField = [];\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            resField[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                resField[i].push(0);\r\n            }\r\n        }\r\n\r\n        // console.log('это тот самый массив',resField);\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const cell = field[i][j]; //temp cell\r\n\r\n                if (this.isItStep(cell) && cell.type === type) {\r\n                    const nearCells = this.getArrayNearCells(cell);\r\n\r\n                    nearCells.forEach((neighbour, direction) => {\r\n                        if (!this.isItStep(neighbour) && !this.isItBorder(neighbour)) {\r\n\r\n                            //for cells that may intersect in the future\r\n                            const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n                            const nextNearCells = this.getArrayNearCells(neighbour);\r\n                            const nextCell = nextNearCells[direction];\r\n                            const value1 = cell.stepPotential[direction];\r\n                            let value2 = 0;\r\n                            if (this.isItStep(nextCell) && !this.isItBorder(nextCell)) {\r\n                                value2 = nextCell.stepPotential[oppositeSides[direction]]\r\n                            }\r\n                            resField[neighbour.y][neighbour.x] = Math.max(resField[neighbour.y][neighbour.x], value1 + value2);\r\n                        }\r\n\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        // return {x:1, y:2}\r\n        return this.findMax(resField);\r\n    };\r\n\r\n    findSumPotintialNearCells(cell) {\r\n\r\n    }\r\n\r\n    findMax = (arr) => {\r\n        const {fieldSize} = this.state;\r\n\r\n        let max = 0;\r\n        let coords = {};\r\n        arr.forEach((row, rowIndex) => row.forEach((col, colIndex) => {\r\n            if (col > max) {\r\n                max = col;\r\n                coords = {y: rowIndex, x: colIndex};\r\n            }\r\n        }));\r\n        return coords;\r\n    };\r\n\r\n    testWin(type) {\r\n        const {field, fieldSize} = this.state;\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                this.findCrossesNeighbour(field[i][j]);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    findCrossesNeighbour(cell) {\r\n        const neighbours = this.getArrayNearCells(cell);\r\n        neighbours.forEach((nearCell, direction) => {\r\n\r\n            if (this.isHaveSameType(cell,nearCell)) {\r\n                console.log(cell.type,nearCell.type);\r\n                console.log(nearCell,direction,2,[cell,nearCell]);\r\n                let res = this.oneLineMatch(nearCell,direction,2,[cell,nearCell]);\r\n                if (res) {\r\n                    this.setState({\r\n                        winner: res[0].type,\r\n                        winSequence: res\r\n                    })\r\n                    console.log(this.state.win);\r\n                    this.props.setWinner(res[0].type);\r\n                }\r\n            }\r\n\r\n        })\r\n\r\n    };\r\n\r\n    oneLineMatch = (cell, direction, count, array) => {\r\n\r\n        if (count === 5) {return array}\r\n        else {\r\n            const neighbours = this.getNearCell(cell, direction);\r\n            if (!this.isHaveSameType(cell, neighbours)) {return null};\r\n            return this.oneLineMatch(neighbours, direction, count + 1, [...array,neighbours]);\r\n\r\n        }\r\n    }\r\n\r\n    //generate array of game field with values for correct render\r\n    fieldRender = () => {\r\n        const {field, fieldRender, fieldSize,winSequence} = this.state;\r\n        if (!field) return [];\r\n        //mark win sequence\r\n        const copyField = field.slice();\r\n        // console.log(copyField);\r\n\r\n        winSequence.forEach( (item) => {\r\n            console.log('hah',copyField[item.y][item.x].win);\r\n            copyField[item.y][item.x].win =true;\r\n\r\n        });\r\n\r\n\r\n        const newField = [];\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            newField[i - 1] = [];\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const item = copyField [i][j];\r\n                const markWin = item.win? 'mark-win' : null;\r\n                console.log('markWin',markWin)\r\n                if (!this.isItStep(item)) newField[i - 1].push(' ');\r\n                else {\r\n                    if (item.type === 'player') newField[i - 1].push(<i className={`fa fa-times ${markWin}`}></i>)\r\n                    else newField[i - 1].push(<i className={`fa fa-circle-o ${markWin}`}></i>)\r\n                }\r\n            }\r\n        }\r\n\r\n        // winSequence.forEach( (item) => {\r\n        //     console.log('hah',newField[item.y-1][item.x-1]);\r\n        //     newField[item.y-1][item.x-1].className.add('markWin');\r\n        //\r\n        // });\r\n        return newField;\r\n        // return field.map((row) => row.map(\r\n        //     (item) => {\r\n        //\r\n        //         if (typeof item === 'number')  return ' '\r\n        //         else {\r\n        //             if (item.type === 'player') return <i className=\"fa fa-times\"></i>\r\n        //             else return <i className=\"fa fa-circle-o\"></i>\r\n        //         }\r\n        // }));\r\n\r\n    }\r\n\r\n    render() {\r\n        const {countMoves,winner,winSequence} = this.state;\r\n        const {setWinner} = this.props;\r\n\r\n        return (\r\n            <GameField field={this.fieldRender()}\r\n                       playerMove={this.playerMove}\r\n                       moves={countMoves}\r\n                       winner = {winner}\r\n                       />\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n//contanes info about step player or pc\r\nclass Step {\r\n    constructor(type, x, y) {\r\n        this.type = type;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    stepPotential = [1, 1, 1, 1, 1, 1, 1, 1]; // 8 directions\r\n    type = null;\r\n    x = null;\r\n    y = null;\r\n    win = false;\r\n}\r\n\r\nclass BorderCell {\r\n    type = 'border';\r\n    stepPotential = [-1, -1, -1, -1, -1, -1, -1, -1];\r\n};\r\n\r\nclass EmptyCell {\r\n    constructor(y, x) {\r\n        this.y = y;\r\n        this.x = x;\r\n    }\r\n\r\n    type = 'emptyCell';\r\n    x = null;\r\n    y = null;\r\n\r\n}\r\n\r\n","import './info.scss';\r\nimport React from \"react\";\r\nimport Winner from \"../winner/winner\";\r\n\r\nexport default class Info extends React.Component {\r\n    state = {\r\n        moves: 0,\r\n\r\n    }\r\n\r\n    render() {\r\n        const {restart,countMoves,playerWin,playerLose,winner} = this.props;\r\n\r\n        const winMessage = winner? <Winner winner={winner}/> : null;\r\n        return (\r\n            <div className='col-lg-4  col-md-12'>\r\n\r\n                {winMessage}\r\n\r\n                <button className=\"info__button-restart\"\r\n                        onClick={() => restart()}>Restart <i className=\"fa fa-refresh\"></i></button>\r\n\r\n                <div className=\"info__stats\">\r\n                    <div className=\"info\">\r\n                        <div className=\"info__block\">\r\n                            <div className=\"info__title\">Moves</div>\r\n                            <div className=\"info__content\">{this.props.moves}</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"info\">\r\n                        <div className=\"info__block\">\r\n                            <div className=\"info__title\">Score</div>\r\n                            <div className=\"info__content\">{playerWin} : {playerLose}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"info info--rules\">\r\n                    <div className=\"info__block\">\r\n                        <div className=\"info__title\">Rules</div>\r\n                        <div className=\"info__content\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam\r\n                            asperiores at commodi, delectus dolores maiores molestiae officia. Adipisci assumenda\r\n                            explicabo facere fugiat fugit labore necessitatibus omnis quaerat sed tenetur, velit!\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import App from './app';\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport './app.scss';\r\nimport '../game/game'\r\nimport Game from \"../game/game\";\r\nimport Info from \"../info/info\";\r\n\r\nexport default class App extends React.Component {\r\n    state = {\r\n        countMoves: 0,\r\n        playerWin: 0,\r\n        playerLose: 0,\r\n        winner: null,\r\n        restart:true\r\n    };\r\n\r\n    changeCountMoves = () => {\r\n        this.setState((state) => ({\r\n            countMoves: state.countMoves + 1\r\n        }))\r\n    };\r\n\r\n\r\n    restart = () => {\r\n        this.setState({\r\n            countMoves: 0,\r\n            playerWin: 0,\r\n            playerLose: 0\r\n        });\r\n\r\n        this.setState( (state) => ({\r\n            restart: !state.restart\r\n        }))\r\n    };\r\n\r\n    setWinner = (win) => {\r\n        this.setState({\r\n            winner: win\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const {countMoves, playerWin, playerLose, winner,restart} = this.state;\r\n\r\n        const game = restart? <Game changeCountMoves={this.changeCountMoves}\r\n                                    setWinner = {this.setWinner}/> : null\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row \">\r\n                    <h1 className='title col-lg-1'>TicTacToy</h1>\r\n                </div>\r\n\r\n                <div className=\"row justify-content-center\">\r\n                    {game}\r\n\r\n                    <Info moves={countMoves}\r\n                          playerWin={playerWin}\r\n                          playerLose={playerLose}\r\n                          winner={winner}\r\n                          restart={this.restart}/>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}