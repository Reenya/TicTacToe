{"version":3,"sources":["components/game-field/game-field.js","components/game-field/game.js","components/info/info.js","components/app/index.js","components/app/app.js","index.js"],"names":["GameField","generateKey","Math","floor","random","lastState","_this2","this","field","props","gameField","map","row","rowIndex","react_default","a","createElement","className","key","cell","cellIndex","game_field_Cell","cellData","playerMove","coords","React","Component","Cell","_ref","onClick","GamePlay","state","fieldRender","fieldSize","countMoves","createGameField","_this","i","j","push","EmptyCell","BorderCell","setState","isItStep","newField","Object","toConsumableArray","Step","calculateNextMove","changeCountMoves","pcMove","_this$state","tempCell","searchPotencialIntersections","item","type","isItBorder","getArrayNearCells","forEach","neighbour","namberDirection","isHaveSameType","recalculationPotencialRelatedCells","oppositeSides","stepPotential","y","x","coordsForMove","calculateCellPotential","slice","console","log","_this$state2","resField","_loop","direction","nextCell","value1","value2","max","findMax","arr","col","colIndex","_this$state3","game_field_GameField","moves","classCallCheck","Info","playerWin","playerLose","Fragment","App","game_GamePlay","info_Info","ReactDOM","render","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.9cd43e39.chunk.js","sourcesContent":["import './game-field.scss';\r\nimport React from \"react\";\r\nimport GamePlay from \"./game\";\r\n\r\nexport default class GameField extends React.Component {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(lastState) {\r\n    }\r\n\r\n    generateKey = () => Math.floor(Math.random()*1000000);\r\n\r\n    render() {\r\n        const {field} = this.props;\r\n        if (field === null) return null;\r\n\r\n        const gameField = field.map((row, rowIndex) => {\r\n            return <tr className=\"game-field_row\"\r\n            key={this.generateKey()}>{row.map((cell, cellIndex) =>\r\n                <Cell\r\n                    cellData={cell}\r\n                    playerMove={this.props.playerMove}\r\n                    coords={{rowIndex, cellIndex}}\r\n                    key={this.generateKey()}/>)}</tr>\r\n        })\r\n\r\n        return (\r\n            <table  className=\"game-field col-lg-9  col-md-12\">\r\n                <tbody>\r\n                {gameField}\r\n                </tbody>\r\n\r\n            </table>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst Cell = ({cellData, playerMove, coords}) => {\r\n    return <td className=\"game-field__cell\"\r\n               onClick={() => playerMove(coords)}>\r\n        {cellData}\r\n    </td>\r\n}","import React from \"react\";\r\nimport GameField from \"./game-field\";\r\n\r\nexport default class GamePlay extends React.Component {\r\n    state = {\r\n        field: null,\r\n        fieldRender: [],\r\n        fieldSize: 12,\r\n        countMoves: 0\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.createGameField();\r\n    }\r\n\r\n\r\n    createGameField = () => {\r\n        const {fieldSize} = this.state;\r\n        const field = [];\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                field[i].push(new EmptyCell(i, j));\r\n            }\r\n        }\r\n        //create border\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[0][i] = new BorderCell();\r\n            field[i][0] = new BorderCell();\r\n            field[fieldSize + 1][i] = new BorderCell();\r\n            field[i][fieldSize + 1] = new BorderCell();\r\n        }\r\n        this.setState({field});\r\n        this.fieldRender();\r\n        return field;\r\n    };\r\n\r\n\r\n    playerMove = ({rowIndex, cellIndex}) => {\r\n        const {field} = this.state;\r\n        if (!this.isItStep(field[rowIndex + 1][cellIndex + 1])) {\r\n            const newField = [...field];\r\n            newField[rowIndex + 1][cellIndex + 1] = new Step('player', cellIndex + 1, rowIndex + 1);\r\n\r\n            this.setState({\r\n                field: newField,\r\n\r\n            });\r\n\r\n\r\n            for (let i = 0; i < 4; i++) {\r\n                this.calculateNextMove();\r\n            };\r\n            this.props.changeCountMoves();\r\n            this.pcMove();\r\n        }\r\n\r\n\r\n    };\r\n\r\n    calculateNextMove = () => {\r\n        const {fieldSize, field} = this.state;\r\n\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const tempCell = field[i][j]\r\n                if (this.isItStep(tempCell)) {\r\n                    this.searchPotencialIntersections(tempCell)\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    isItStep = (item) => {\r\n        if (item.type !== ('emptyCell')) return true;\r\n\r\n        return false;\r\n    };\r\n\r\n    isItBorder = (item) => {\r\n        if (item.type === 'border') return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    searchPotencialIntersections = (cell) => {\r\n        const {field} = this.state;\r\n        const nearCells = this.getArrayNearCells(cell);\r\n        nearCells.forEach((neighbour, namberDirection) => {\r\n            if (this.isItStep(neighbour)) {\r\n                if (this.isHaveSameType(cell, neighbour)) {\r\n                    this.recalculationPotencialRelatedCells(cell, neighbour, namberDirection)\r\n                }\r\n            }\r\n        })\r\n\r\n    };\r\n\r\n    recalculationPotencialRelatedCells = (cell, neighbour, namberDirection) => {\r\n        const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n        const num = cell.stepPotential[namberDirection];\r\n        neighbour.stepPotential[namberDirection] += cell.stepPotential[namberDirection];\r\n        cell.stepPotential[oppositeSides[namberDirection]] += neighbour.stepPotential[oppositeSides[namberDirection]];\r\n        cell.stepPotential[namberDirection] = 0;\r\n        neighbour.stepPotential[oppositeSides[namberDirection]] = 0;\r\n\r\n    }\r\n\r\n    isHaveSameType = (cell, neighbour) => {\r\n        if (cell.type === neighbour.type || neighbour.type === 'border') return true\r\n        else return false;\r\n    };\r\n\r\n    getArrayNearCells = (cell) => {\r\n\r\n        const {field} = this.state;\r\n        return [\r\n            field[cell.y - 1][cell.x], field[cell.y - 1][cell.x + 1],\r\n            field[cell.y][cell.x + 1], field[cell.y + 1][cell.x + 1],\r\n            field[cell.y + 1][cell.x], field[cell.y + 1][cell.x - 1],\r\n            field[cell.y][cell.x - 1], field[cell.y - 1][cell.x - 1]\r\n        ]\r\n    }\r\n\r\n\r\n    //there is methods for calculation next move for pc\r\n    pcMove = () => {\r\n        const {field} = this.state;\r\n        const coordsForMove = this.calculateCellPotential('player');\r\n        const newField = field.slice();\r\n        field[coordsForMove.y][coordsForMove.x] = new Step('pc', coordsForMove.x, coordsForMove.y);\r\n        console.log(newField);\r\n        this.setState({})\r\n        // const pcPotential = this.calculateCellPotential('pc');\r\n    };\r\n\r\n    calculateCellPotential = (type) => {\r\n        const {fieldSize, field} = this.state;\r\n\r\n        //create array for cell potential for move\r\n        const resField = [];\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            resField[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                resField[i].push(0);\r\n            }\r\n        }\r\n\r\n        // console.log('это тот самый массив',resField);\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const cell = field[i][j]; //temp cell\r\n\r\n                if (this.isItStep(cell) && cell.type === type) {\r\n                    const nearCells = this.getArrayNearCells(cell);\r\n\r\n                    nearCells.forEach((neighbour, direction) => {\r\n                        if (!this.isItStep(neighbour) && !this.isItBorder(neighbour)) {\r\n\r\n                            //for cells that may intersect in the future\r\n                            const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n                            const nextNearCells = this.getArrayNearCells(neighbour);\r\n                            const nextCell = nextNearCells[direction];\r\n                            const value1 = cell.stepPotential[direction];\r\n                            let value2 = 0;\r\n                            if (this.isItStep(nextCell) && !this.isItBorder(nextCell)) {\r\n                                value2 = nextCell.stepPotential[oppositeSides[direction]]\r\n                            }\r\n                            resField[neighbour.y][neighbour.x] = Math.max(resField[neighbour.y][neighbour.x], value1 + value2);\r\n                        }\r\n\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        // return {x:1, y:2}\r\n        return this.findMax(resField);\r\n    };\r\n\r\n    findSumPotintialNearCells(cell) {\r\n\r\n    }\r\n\r\n    findMax = (arr) => {\r\n        const {fieldSize} = this.state;\r\n\r\n        let max = 0;\r\n        let coords = {};\r\n        arr.forEach((row, rowIndex) => row.forEach((col, colIndex) => {\r\n            if (col > max) {\r\n                max = col;\r\n                coords = {y: rowIndex, x: colIndex};\r\n            }\r\n        }));\r\n\r\n        console.log(max, coords);\r\n        return coords;\r\n    }\r\n\r\n    //generate array of game field with values for correct render\r\n    fieldRender = () => {\r\n        const {field, fieldRender, fieldSize} = this.state;\r\n\r\n        if (!field) return [];\r\n        const newField = [];\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            newField[i - 1] = [];\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const item = field [i][j];\r\n                if (!this.isItStep(item)) newField[i - 1].push(' ');\r\n                else {\r\n                    if (item.type === 'player') newField[i - 1].push(<i className=\"fa fa-times\"></i>)\r\n                    else newField[i - 1].push(<i className=\"fa fa-circle-o\"></i>)\r\n                }\r\n            }\r\n        }\r\n        return newField;\r\n        // return field.map((row) => row.map(\r\n        //     (item) => {\r\n        //\r\n        //         if (typeof item === 'number')  return ' '\r\n        //         else {\r\n        //             if (item.type === 'player') return <i className=\"fa fa-times\"></i>\r\n        //             else return <i className=\"fa fa-circle-o\"></i>\r\n        //         }\r\n        // }));\r\n\r\n    }\r\n\r\n    render() {\r\n        const {countMoves} = this.state;\r\n\r\n        return (\r\n            <GameField field={this.fieldRender()} playerMove={this.playerMove} moves={countMoves}/>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n//contanes info about step player or pc\r\nclass Step {\r\n    constructor(type, x, y) {\r\n        this.type = type;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    stepPotential = [1, 1, 1, 1, 1, 1, 1, 1]; // 8 directions\r\n    type = null;\r\n    x = null;\r\n    y = null;\r\n}\r\n\r\nclass BorderCell {\r\n    type = 'border';\r\n    stepPotential = [-1, -1, -1, -1, -1, -1, -1, -1];\r\n};\r\n\r\nclass EmptyCell {\r\n    constructor(y, x) {\r\n        this.y = y;\r\n        this.x = x;\r\n    }\r\n\r\n    type = 'emptyCell';\r\n    x = null;\r\n    y = null;\r\n\r\n}\r\n\r\n","import './info.scss';\r\nimport React from \"react\";\r\n\r\nexport default class Info extends React.Component {\r\n    state = {\r\n        moves: 0,\r\n        playerWin:0,\r\n        playerLose:0\r\n    }\r\n    render() {\r\n        const {moves,playerWin,playerLose} = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <div className='col-lg-4  col-md-12'>\r\n                    <button className=\"info__button-restart\">Restart <i className=\"fa fa-refresh\"></i></button>\r\n\r\n                    <div className=\"info__stats\">\r\n                        <div className=\"info\">\r\n                            <div className=\"info__block\">\r\n                                <div className=\"info__title\">Moves</div>\r\n                                <div className=\"info__content\">{this.props.moves}</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"info\">\r\n                            <div className=\"info__block\">\r\n                                <div className=\"info__title\">Score</div>\r\n                                <div className=\"info__content\">{playerWin} : {playerLose}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"info info--rules\">\r\n                        <div className=\"info__block\">\r\n                            <div className=\"info__title\">Rules</div>\r\n                            <div className=\"info__content\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam asperiores at commodi, delectus dolores maiores molestiae officia. Adipisci assumenda explicabo facere fugiat fugit labore necessitatibus omnis quaerat sed tenetur, velit!</div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import App from './app';\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport './app.scss';\r\nimport '../game-field/game'\r\nimport Game from \"../game-field/game\";\r\nimport Info from \"../info/info\";\r\n\r\nexport default class App extends React.Component{\r\n    state = {\r\n        countMoves:0\r\n    };\r\n\r\n    changeCountMoves =()=>{\r\n        this.setState((state)=>({\r\n            countMoves: state.countMoves+1\r\n        }))\r\n    }\r\n\r\n\r\n    render(){\r\n        const {countMoves} = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row \">\r\n                <h1 className='title col-lg-1'>TicTacToy</h1>\r\n                </div>\r\n\r\n                <div className=\"row justify-content-center\">\r\n                    <Game changeCountMoves={this.changeCountMoves}/>\r\n\r\n                    <Info moves ={countMoves}/>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}