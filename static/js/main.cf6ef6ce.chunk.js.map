{"version":3,"sources":["components/button/index.js","components/button/button.js","components/buttons/buttons.js","components/winner/winner.js","components/info/index.js","components/info/info.js","components/game/checkTypes.js","components/game/game-logic.js","components/game/game-render.js","components/game/index.js","components/game/game.js","components/app/index.js","components/app/app.js","index.js"],"names":["Button","_ref","children","action","react_default","a","createElement","className","onClick","ButtonContinue","continueAction","components_button","ButtonRestart","_ref2","restartAction","Winner","_this$props","this","props","winner","message","buttons_ButtonContinue","React","Component","Info","state","moves","playerWin","countMoves","playerLose","winMessage","winner_Winner","buttons_ButtonRestart","isItStep","item","type","isItBorder","isItEmpty","isHaveSameType","cell","neighbour","isHaveOppositeType","GameLogic","fieldSize","_this","Object","classCallCheck","field","winSequence","createGameField","i","j","push","EmptyCell","BorderCell","playerMove","rowIndex","cellIndex","Step","calculateNextMove","pcMove","testWin","tempCell","searchPotentialIntersections","getArrayNearCells","forEach","namberDirection","recalculationPotentialIdenticalCells","stepPotential","recalculationPotentialOppositeTypeCells","oppositeSides","y","x","coordsForMove","calculateCellPotential","coordsForMove2","potential","coords","resField","_loop","direction","nextCell","getNearCell","value1","value2","nextNearCells","countDangerousPotentials","nextCellDirection","intersectionPotential","Math","max","findMax","arr","row","colIndex","oneLineMatch","count","array","neighbours","concat","toConsumableArray","fieldRender","_this$state","readyField","copyField","slice","win","newField","markWin","findCrossesNeighbour","_this2","nearCell","res","GameRender","generateKey","floor","random","gameField","map","key","game_render_Cell","cellData","Cell","Game","gameEnd","gameLogic","componentDidMount","setState","gameRestart","restartEnd","setWinner","changeCountMoves","prevProps","restart","game_render_GameRender","App","game","components_game","info","components_info","ReactDOM","render","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.cf6ef6ce.chunk.js","sourcesContent":["import Button from './button';\r\n\r\nexport default Button;","import React from \"react\";\r\nimport './button.scss';\r\n\r\nconst Button = ({children,action}) => {\r\n\r\n    return (\r\n        <button className=\"button\"\r\n        onClick={() => action()}>\r\n            {children}\r\n        </button>\r\n\r\n    )\r\n};\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"../button\";\r\n\r\nconst ButtonContinue = ({continueAction}) => {\r\n    return(\r\n        <Button action={continueAction}> Continue </Button>\r\n    )\r\n};\r\n\r\nconst ButtonRestart = ({restartAction}) => {\r\n    return(\r\n        <Button action={restartAction}> Restart <i className=\"fa fa-refresh\"></i> </Button>\r\n    )\r\n};\r\n\r\nexport {ButtonContinue,ButtonRestart};","import React from \"react\";\r\nimport {ButtonContinue} from \"../buttons\";\r\n\r\nexport default class Winner extends React.Component{\r\n    render() {\r\n        const {winner,continueAction} = this.props;\r\n        const message = winner==='player'? 'You are a winner!' : 'You lose. Sorry :(';\r\n        return(\r\n            <div className=\"\">\r\n                <div className=\"info winner\">\r\n                    <div className=\"info__block\">\r\n                        <div className=\"info__title\">{message}</div>\r\n                        <div className=\"info__content\">\r\n                            <ButtonContinue continueAction={continueAction}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import Info from './info';\r\n\r\nexport default Info;","import './info.scss';\r\nimport React from \"react\";\r\nimport Winner from \"../winner/winner\";\r\nimport {ButtonRestart} from \"../buttons\";\r\n\r\nexport default class Info extends React.Component {\r\n    state = {\r\n        moves: 0,\r\n\r\n    }\r\n\r\n    render() {\r\n        const {restartAction,continueAction,countMoves,playerWin,playerLose,winner} = this.props;\r\n\r\n        const winMessage = winner? <Winner winner={winner}\r\n                                           continueAction = {continueAction}/> : null;\r\n        return (\r\n            <div className='col-lg-4  col-md-12'>\r\n\r\n                {winMessage}\r\n\r\n                <ButtonRestart restartAction = {restartAction}/>\r\n\r\n                <div className=\"info__stats\">\r\n                    <div className=\"info\">\r\n                        <div className=\"info__block\">\r\n                            <div className=\"info__title\">Moves</div>\r\n                            <div className=\"info__content\">{this.props.moves}</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"info\">\r\n                        <div className=\"info__block\">\r\n                            <div className=\"info__title\">Score</div>\r\n                            <div className=\"info__content\">{playerWin} : {playerLose}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"info info--rules\">\r\n                    <div className=\"info__block\">\r\n                        <div className=\"info__title\">Rules</div>\r\n                        <div className=\"info__content\">\r\n                            <div>1. You have field 15x15</div>\r\n                            <div>2. You need to collect 5 crosses in a row (including vertical and diagonal axes)</div>\r\n                            <div>3. AI will disturb you and seek to collect their 5 crosses</div>\r\n                            <div>4. So go and win!</div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","const isItStep = (item) => {\r\n    if (item.type !== ('emptyCell' || 'border')) return true;\r\n\r\n    return false;\r\n};\r\n\r\nconst isItBorder = (item) => {\r\n    if (item.type === 'border') return true;\r\n\r\n    return false;\r\n};\r\n\r\nconst isItEmpty = (item) => {\r\n    if (item.type === 'emptyCell') return true;\r\n\r\n    return false;\r\n};\r\n\r\nconst isHaveSameType = (cell, neighbour) => {\r\n    if (cell.type === neighbour.type && !isItEmpty(cell) && !isItEmpty(neighbour)) return true\r\n    else return false;\r\n};\r\n\r\nconst isHaveOppositeType = (cell, neighbour) => {\r\n    if (cell.type !== neighbour.type && !isItEmpty(cell) && !isItEmpty(neighbour) && !isItBorder(neighbour) && !isItBorder(cell)) return true\r\n    else return false;\r\n};\r\n\r\nexport {isItStep, isItBorder, isItEmpty, isHaveSameType, isHaveOppositeType};","import React from \"react\";\r\nimport {isHaveOppositeType, isHaveSameType, isItBorder, isItEmpty, isItStep} from './checkTypes';\r\n\r\nexport default class GameLogic {\r\n\r\n    field = []; //the main field where all the calculations take place\r\n    fieldSize = 0;\r\n    winner = null;\r\n    winSequence = [];\r\n\r\n    constructor(fieldSize) {\r\n        this.field = [];\r\n        this.fieldSize = fieldSize;\r\n    }\r\n\r\n    createGameField = () => {\r\n        const {field, fieldSize} = this;\r\n\r\n        this.winner = null;\r\n        this.winSequence = [];\r\n\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                field[i].push(new EmptyCell(i, j));\r\n            }\r\n        }\r\n        //create border\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[0][i] = new BorderCell();\r\n            field[i][0] = new BorderCell();\r\n            field[fieldSize + 1][i] = new BorderCell();\r\n            field[i][fieldSize + 1] = new BorderCell();\r\n        }\r\n        return field;\r\n    };\r\n\r\n\r\n    playerMove = (rowIndex, cellIndex) => {\r\n        const {field} = this;\r\n        \r\n        if (!isItStep(field[rowIndex + 1][cellIndex + 1])) {\r\n            field[rowIndex + 1][cellIndex + 1] = new Step('player', cellIndex + 1, rowIndex + 1);\r\n\r\n            for (let i = 0; i < 5; i++) {\r\n                this.calculateNextMove();\r\n            };\r\n\r\n            this.pcMove();\r\n            this.testWin();\r\n            const {winner, winSequence} = this;\r\n            return {field, winner, winSequence}\r\n        } else return null;\r\n\r\n\r\n\r\n    };\r\n\r\n    calculateNextMove = () => {\r\n        const {field, fieldSize} = this;\r\n\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const tempCell = field[i][j];\r\n                if (isItStep(tempCell)) {\r\n                    this.searchPotentialIntersections(tempCell)\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    //various variants are computed with a sequence connection\r\n    searchPotentialIntersections = (cell) => {\r\n        const nearCells = this.getArrayNearCells(cell);\r\n        nearCells.forEach((neighbour, namberDirection) => {\r\n            if (isItStep(neighbour)) {\r\n                if (isHaveSameType(cell, neighbour) || isItBorder(neighbour)) {\r\n                    this.recalculationPotentialIdenticalCells(cell, neighbour, namberDirection)\r\n                }\r\n\r\n                if (isHaveOppositeType(cell, neighbour) && cell.stepPotential[namberDirection] <= -10) {\r\n                    this.recalculationPotentialOppositeTypeCells(cell, neighbour, namberDirection)\r\n                }\r\n\r\n            }\r\n        })\r\n\r\n    };\r\n    recalculationPotentialOppositeTypeCells = (cell, neighbour, namberDirection) => {\r\n        const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n        cell.stepPotential[namberDirection] = -100;\r\n        cell.stepPotential[oppositeSides[namberDirection]] = -1;\r\n\r\n\r\n    }\r\n\r\n    recalculationPotentialIdenticalCells = (cell, neighbour, namberDirection) => {\r\n        const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n        const num = cell.stepPotential[namberDirection];\r\n        neighbour.stepPotential[namberDirection] += cell.stepPotential[namberDirection];\r\n        cell.stepPotential[oppositeSides[namberDirection]] += neighbour.stepPotential[oppositeSides[namberDirection]];\r\n        cell.stepPotential[namberDirection] = 0;\r\n        neighbour.stepPotential[oppositeSides[namberDirection]] = 0;\r\n\r\n    }\r\n\r\n\r\n    getArrayNearCells = ({y, x}) => {\r\n\r\n        const {field} = this;\r\n        return [\r\n            field[y - 1][x], field[y - 1][x + 1],\r\n            field[y][x + 1], field[y + 1][x + 1],\r\n            field[y + 1][x], field[y + 1][x - 1],\r\n            field[y][x - 1], field[y - 1][x - 1]\r\n        ]\r\n    };\r\n\r\n    getNearCell({x, y}, direction) {\r\n        const {field} = this;\r\n        switch (direction) {\r\n            case 0:\r\n                return field[y - 1][x];\r\n                break;\r\n            case 1:\r\n                return field[y - 1][x + 1];\r\n                break;\r\n            case 2:\r\n                return field[y][x + 1];\r\n                break;\r\n            case 3:\r\n                return field[y + 1][x + 1];\r\n                break;\r\n            case 4:\r\n                return field[y + 1][x];\r\n                break;\r\n            case 5:\r\n                return field[y + 1][x - 1];\r\n                break;\r\n            case 6:\r\n                return field[y][x - 1];\r\n                break;\r\n            case 7:\r\n                return field[y - 1][x - 1];\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    //there is methods for calculation next move for pc\r\n    pcMove = () => {\r\n        const {field} = this;\r\n        let coordsForMove = this.calculateCellPotential('player');\r\n        const coordsForMove2 = this.calculateCellPotential('pc');\r\n        if ((coordsForMove.potential - 1) < coordsForMove2.potential && coordsForMove2.potential >= 1) {\r\n            coordsForMove = coordsForMove2;\r\n        }\r\n        field[coordsForMove.coords.y][coordsForMove.coords.x] = new Step('pc', coordsForMove.coords.x, coordsForMove.coords.y);\r\n    };\r\n\r\n    calculateCellPotential = (type) => {\r\n        const {field, fieldSize} = this;\r\n        //create empty array for cell potential for move\r\n        const resField = [];\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            resField[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                resField[i].push(0);\r\n            }\r\n        }\r\n        //looking for the maximum potential for each cell\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const cell = field[i][j]; //initial cell\r\n\r\n                if (isItStep(cell) && cell.type === type) {\r\n                    const nearCells = this.getArrayNearCells(cell);\r\n                    nearCells.forEach((neighbour, direction) => {\r\n                        if (isItEmpty(neighbour)) {\r\n\r\n                            const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n\r\n                            //for cells that may intersect in the future in one line\r\n                            const nextCell = this.getNearCell(neighbour, direction); //it's the cell which is located one cell away from the initial cell\r\n                            const value1 = cell.stepPotential[direction];\r\n                            let value2 = 0;\r\n                            if (isItStep(nextCell) && !isItBorder(nextCell) && isHaveSameType(cell, nextCell)) {\r\n                                value2 = nextCell.stepPotential[oppositeSides[direction]]\r\n                            }\r\n\r\n                            // for a cell that will has multiple intersections\r\n                            const nextNearCells = this.getArrayNearCells(neighbour);\r\n                            let countDangerousPotentials = 0;\r\n                            nextNearCells.forEach((nextCell, nextCellDirection) => {\r\n                                if (isItStep(neighbour) && !isItBorder(nextCell) && isHaveSameType(cell, nextCell)) {\r\n                                    if (nextCell.stepPotential[oppositeSides[nextCellDirection]] >= 2) {\r\n                                        countDangerousPotentials++;\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            const intersectionPotential = countDangerousPotentials >= 2 ? 3 : cell.stepPotential[direction];\r\n\r\n\r\n                            resField[neighbour.y][neighbour.x] = Math.max(resField[neighbour.y][neighbour.x], value1 + value2, intersectionPotential);\r\n                        }\r\n\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.findMax(resField);\r\n    };\r\n\r\n    findMax = (arr) => {\r\n        let max = 0;\r\n        let coords = {};\r\n        let potential = 0;\r\n        arr.forEach((row, rowIndex) => row.forEach((item, colIndex) => {\r\n            if (item > max) {\r\n                max = item;\r\n                coords = {y: rowIndex, x: colIndex};\r\n                potential = max;\r\n            }\r\n        }));\r\n        return {coords, potential};\r\n    };\r\n\r\n    testWin() {\r\n        const {field, fieldSize} = this;\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                this.findCrossesNeighbour(field[i][j]);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    findCrossesNeighbour(cell) {\r\n        const neighbours = this.getArrayNearCells(cell);\r\n        neighbours.forEach((nearCell, direction) => {\r\n\r\n            if (isHaveSameType(cell, nearCell)) {\r\n                let res = this.oneLineMatch(nearCell, direction, 2, [cell, nearCell]);\r\n\r\n                if (res) {\r\n                    this.winner = res[0].type;\r\n                    this.winSequence = res;\r\n                }\r\n            }\r\n\r\n        })\r\n\r\n    };\r\n\r\n    oneLineMatch = (cell, direction, count, array) => {\r\n\r\n        if (count === 5) {\r\n            return array\r\n        }\r\n        else {\r\n            const neighbours = this.getNearCell(cell, direction);\r\n            if (!isHaveSameType(cell, neighbours)) {\r\n                return null\r\n            }\r\n            ;\r\n\r\n            return this.oneLineMatch(neighbours, direction, count + 1, [...array, neighbours]);\r\n\r\n        }\r\n    }\r\n\r\n    //generate array of game field with values for correct render\r\n    fieldRender = () => {\r\n        const {winSequence, readyField} = this.state;\r\n        const {field, fieldSize} = this;\r\n\r\n\r\n        if (!readyField) return [];\r\n        //mark win sequence\r\n        const copyField = readyField.slice();\r\n\r\n        winSequence.forEach((item) => {\r\n            copyField[item.y][item.x].win = true;\r\n        });\r\n\r\n        const newField = [];\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            newField[i - 1] = [];\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const item = copyField [i][j];\r\n                const markWin = item.win ? 'mark-win' : null;\r\n                if (!isItStep(item)) newField[i - 1].push(' ');\r\n                else {\r\n                    if (item.type === 'player') newField[i - 1].push(<i className={`fa fa-times ${markWin}`}></i>)\r\n                    else newField[i - 1].push(<i className={`fa fa-circle-o ${markWin}`}></i>)\r\n                }\r\n            }\r\n        }\r\n        return newField;\r\n    }\r\n}\r\n\r\n//contanes info about step player or pc\r\nclass Step {\r\n    constructor(type, x, y) {\r\n        this.type = type;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    stepPotential = [1, 1, 1, 1, 1, 1, 1, 1]; // 8 directions\r\n    type = null;\r\n    x = null;\r\n    y = null;\r\n    win = false;\r\n}\r\n\r\nclass BorderCell {\r\n    type = 'border';\r\n    stepPotential = [-1, -1, -1, -1, -1, -1, -1, -1];\r\n};\r\n\r\nclass EmptyCell {\r\n    constructor(y, x) {\r\n        this.y = y;\r\n        this.x = x;\r\n    }\r\n\r\n    type = 'emptyCell';\r\n    x = null;\r\n    y = null;\r\n\r\n}\r\n\r\n","import './game-field.scss';\r\nimport React from \"react\";\r\n\r\nexport default class GameRender extends React.Component {\r\n\r\n\r\n    generateKey = () => Math.floor(Math.random() * 1000000);\r\n\r\n    render() {\r\n        const {field} = this.props;\r\n\r\n        if (field === []) return null;\r\n\r\n        const gameField = field.map((row, rowIndex) => {\r\n            return <tr className=\"game-field_row\"\r\n                       key={this.generateKey()}>\r\n                {row.map((cell, cellIndex) => {\r\n                        return <Cell\r\n                            cellData={cell}\r\n                            playerMove={this.props.playerMove}\r\n                            coords={{rowIndex, cellIndex}}\r\n                            key={this.generateKey()}\r\n                        />\r\n                    }\r\n\r\n                )}</tr>\r\n        });\r\n\r\n        return (\r\n\r\n                <div className=\" col-lg-7  col-md-12\">\r\n                    <table className=\"game-field\">\r\n                        <tbody>\r\n                        {gameField}\r\n                        </tbody>\r\n                    </table>\r\n\r\n\r\n                </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst Cell = ({cellData, playerMove, coords}) => {\r\n    return <td className=\"game-field__cell\"\r\n               onClick={() => playerMove(coords)}>\r\n        {cellData}\r\n    </td>\r\n}","import Game from './game';\r\n\r\nexport default Game;","import React from \"react\";\r\nimport GameLogic from \"./game-logic\";\r\nimport GameRender from \"./game-render\";\r\nimport {isItStep} from \"./checkTypes\";\r\n\r\nexport default class Game extends React.Component {\r\n    state = {\r\n        field: null,\r\n        fieldSize: 12,\r\n        winner: null,\r\n        winSequence: [],\r\n        gameEnd: false\r\n    };\r\n\r\n    gameLogic = new GameLogic(this.state.fieldSize);\r\n\r\n    componentDidMount = () => {\r\n        this.setState({\r\n            field: this.gameLogic.createGameField()\r\n        })\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n        if (prevProps.restart === false && this.props.restart === true) {\r\n            this.gameRestart();\r\n        }\r\n    }\r\n\r\n    gameRestart = () => {\r\n\r\n        this.gameLogic = new GameLogic(this.state.fieldSize);\r\n\r\n        this.setState({\r\n            field: this.gameLogic.createGameField(),\r\n            fieldSize: 12,\r\n            winner: null,\r\n            winSequence: [],\r\n            gameEnd: false\r\n        });\r\n\r\n        this.props.restartEnd();\r\n\r\n    };\r\n\r\n    playerMove = ({rowIndex, cellIndex}) => {\r\n\r\n        if (!this.state.gameEnd) {\r\n            const res = this.gameLogic.playerMove(rowIndex, cellIndex);\r\n            if (res) {\r\n                this.setState({\r\n                    field: res.field\r\n                })\r\n\r\n                if (res.winner) {\r\n                    this.setState({\r\n                        winner: res.winner,\r\n                        winSequence: res.winSequence,\r\n                        gameEnd: true\r\n                    })\r\n                    this.props.setWinner(res.winner);\r\n                }\r\n                this.props.changeCountMoves();\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    fieldRender = () => {\r\n        const {fieldSize, winSequence, field} = this.state;\r\n\r\n        if (!field) return [];\r\n        //mark win sequence\r\n        const copyField = field.slice();\r\n\r\n        winSequence.forEach((item) => {\r\n            copyField[item.y][item.x].win = true;\r\n        });\r\n\r\n        const newField = [];\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            newField[i - 1] = [];\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const item = copyField [i][j];\r\n                const markWin = item.win ? 'mark-win' : null;\r\n                if (!isItStep(item)) newField[i - 1].push(' ');\r\n                else {\r\n                    if (item.type === 'player') newField[i - 1].push(<i className={`fa fa-times ${markWin}`}></i>)\r\n                    else newField[i - 1].push(<i className={`fa fa-circle-o ${markWin}`}></i>)\r\n                }\r\n            }\r\n        }\r\n\r\n        return newField;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <GameRender field={this.fieldRender()}\r\n                       playerMove={this.playerMove}/>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n","import App from './app';\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport Info from \"../info\";\r\nimport Game from \"../game\";\r\n\r\nimport './app.scss';\r\n\r\nexport default class App extends React.Component {\r\n    state = {\r\n        countMoves: 0,\r\n        playerWin: 0,\r\n        playerLose: 0,\r\n        winner: null,\r\n        restart: false\r\n    };\r\n\r\n    changeCountMoves = () => {\r\n        this.setState((state) => ({\r\n            countMoves: state.countMoves + 1\r\n        }))\r\n    };\r\n\r\n    continueAction =() => {\r\n        this.setState({\r\n            countMoves: 0,\r\n            restart:true,\r\n            winner: null\r\n        });\r\n    }\r\n    restartAction = () => {\r\n        this.setState({\r\n            countMoves: 0,\r\n            playerWin: 0,\r\n            playerLose: 0,\r\n            restart:true\r\n        });\r\n\r\n    };\r\n\r\n    restartEnd = () => {\r\n        this.setState({restart:false})\r\n    }\r\n\r\n    setWinner = (win) => {\r\n        if (win==='player') {\r\n            this.setState((state) => ({\r\n                winner: win,\r\n                playerWin: state.playerWin+1\r\n            }))\r\n        } else {\r\n            this.setState((state) => ({\r\n                winner: win,\r\n                playerLose: state.playerLose+1\r\n            }))\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {countMoves, playerWin, playerLose, winner,restart} = this.state;\r\n\r\n        const game = <Game changeCountMoves={this.changeCountMoves}\r\n                           setWinner = {this.setWinner}\r\n                           restart = {restart}\r\n                           restartEnd = {this.restartEnd}/>;\r\n\r\n\r\n        const info = <Info moves={countMoves}\r\n                           playerWin={playerWin}\r\n                           playerLose={playerLose}\r\n                           winner={winner}\r\n                           restartAction ={this.restartAction}\r\n                           continueAction ={this.continueAction}/>\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row \">\r\n                    <h1 className='title col-lg-1'>TicTacToy</h1>\r\n                </div>\r\n\r\n                <div className=\"row justify-content-center\">\r\n                    {game}\r\n                    {info}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}