{"version":3,"sources":["components/button/index.js","components/button/button.js","components/all-buttons/all-buttons.js","components/info-block/index.js","components/info-block/info-block.js","components/winner-block/index.js","components/winner-block/winner-block.js","components/info-panel/index.js","components/info-panel/info-panel.js","components/game/check-types.js","components/game/game-logic.js","components/game/game-render.js","components/game/index.js","components/game/game.js","components/app/index.js","components/app/app.js","index.js"],"names":["Button","_ref","children","action","react_default","a","createElement","className","onClick","ButtonContinue","continueAction","components_button","ButtonRestart","_ref2","restartAction","InfoBlock","_ref$title","title","_ref$extraClass","extraClass","_ref$children","allClasses","concat","WinnerBlock","winner","message","components_info_block","all_buttons_ButtonContinue","InfoPanel","playerWin","playerLose","moves","winMessage","components_winner_block","all_buttons_ButtonRestart","isItStep","item","type","isItBorder","isItEmpty","isHaveSameType","cell","neighbour","isHaveOppositeType","GameLogic","fieldSize","_this","this","Object","classCallCheck","field","winSequence","createGameField","i","j","push","EmptyCell","BorderCell","playerMove","rowIndex","cellIndex","Step","calculateNextMove","pcMove","testWin","tempCell","searchPotentialIntersections","getArrayNearCells","forEach","numberDirection","recalculationPotentialIdenticalCells","stepPotential","recalculationPotentialOppositeTypeCells","oppositeSides","y","x","coordsForMove","calculateCellPotential","coordsForMove2","potential","coords","resField","_loop","direction","nextCell","getNearCell","value1","value2","nextNearCells","countDangerousPotentials","nextCellDirection","intersectionPotential","Math","max","findMax","arr","row","colIndex","oneLineMatch","count","array","neighbours","toConsumableArray","findCrossesNeighbour","_this2","nearCell","res","win","GameRender","generateKey","floor","random","props","gameField","map","key","game_render_Cell","cellData","React","Component","Cell","Game","state","gameEnd","gameLogic","componentDidMount","setState","componentDidUpdate","prevProps","restart","gameRestart","restartEnd","setWinner","changeCountMoves","fieldRender","_this$state","copyField","slice","newField","markWin","game_render_GameRender","App","countMoves","game","components_game","infoPanel","components_info_panel","ReactDOM","render","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.47c395ad.chunk.js","sourcesContent":["import Button from './button';\r\n\r\nexport default Button;","import React from \"react\";\r\nimport './button.scss';\r\n\r\nconst Button = ({children,action}) => {\r\n\r\n    return (\r\n        <button className=\"button\"\r\n        onClick={() => action()}>\r\n            {children}\r\n        </button>\r\n\r\n    )\r\n};\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"../button\";\r\n\r\nconst ButtonContinue = ({continueAction}) => {\r\n    return(\r\n        <Button action={continueAction}> Continue </Button>\r\n    )\r\n};\r\n\r\nconst ButtonRestart = ({restartAction}) => {\r\n    return(\r\n        <Button action={restartAction}> Restart <i className=\"fa fa-refresh\"></i> </Button>\r\n    )\r\n};\r\n\r\nexport {ButtonContinue,ButtonRestart};","import InfoBlock from \"./info-block\";\r\n\r\nexport default InfoBlock;","import React from \"react\";\r\n\r\nimport \"./info-block.scss\";\r\n\r\nconst InfoBlock = ({title = \"\",extraClass = \"\",children=\"\"}) => {\r\n    const allClasses = `info-block ${extraClass}`;\r\n\r\n    return(\r\n        <div className={allClasses}>\r\n            <div className=\"info-block__block\">\r\n                <div className=\"info-block__title\">{title}</div>\r\n                <div className=\"info-block__content\">{children}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default InfoBlock;","import WinnerBlock from './winner-block';\r\n\r\nexport default WinnerBlock;","import React from \"react\";\r\nimport {ButtonContinue} from \"../all-buttons\";\r\nimport InfoBlock from \"../info-block\";\r\n\r\nconst WinnerBlock = ({winner, continueAction}) => {\r\n    const message = winner === 'player' ? 'You are a winner!' : 'You lose. Sorry :(';\r\n    return (\r\n        <InfoBlock title={message}>\r\n            <ButtonContinue continueAction={continueAction}/>\r\n        </InfoBlock>\r\n    )\r\n}\r\n\r\nexport default WinnerBlock;","import InfoPanel from './info-panel';\r\n\r\nexport default InfoPanel;","import React from \"react\";\r\nimport {ButtonRestart} from \"../all-buttons\";\r\nimport InfoBlock from \"../info-block\";\r\nimport WinnerBlock from \"../winner-block\";\r\n\r\nimport './info.scss';\r\n\r\nconst InfoPanel =({restartAction,continueAction,playerWin,playerLose,winner,moves}) => {\r\n\r\n        const winMessage = winner? <WinnerBlock winner={winner}\r\n                                           continueAction = {continueAction}/> : null;\r\n        return (\r\n            <div className='col-xl-4 col-lg-3  col-md-12'>\r\n\r\n                {winMessage}\r\n\r\n                <ButtonRestart restartAction = {restartAction}/>\r\n\r\n                <InfoBlock title=\"Moves\">\r\n                    {moves}\r\n                </InfoBlock>\r\n\r\n                <InfoBlock title=\"Score\">\r\n                    {playerWin} : {playerLose}\r\n                </InfoBlock>\r\n\r\n                <InfoBlock title=\"Rules\"\r\n                           extraClass=\"info-block--rules\">\r\n                    <div>1. You have field 15x15</div>\r\n                    <div>2. You need to collect 5 crosses in a row (including vertical and diagonal axes)</div>\r\n                    <div>3. AI will disturb you and seek to collect their 5 crosses</div>\r\n                    <div>4. So go and win!</div>\r\n                </InfoBlock>\r\n\r\n            </div>\r\n\r\n        )\r\n}\r\n\r\nexport default InfoPanel;","const isItStep = (item) => {\r\n    if (item.type !== ('emptyCell' || 'border')) return true;\r\n\r\n    return false;\r\n};\r\n\r\nconst isItBorder = (item) => {\r\n    if (item.type === 'border') return true;\r\n\r\n    return false;\r\n};\r\n\r\nconst isItEmpty = (item) => {\r\n    if (item.type === 'emptyCell') return true;\r\n\r\n    return false;\r\n};\r\n\r\nconst isHaveSameType = (cell, neighbour) => {\r\n    if (cell.type === neighbour.type && !isItEmpty(cell) && !isItEmpty(neighbour)) return true\r\n    else return false;\r\n};\r\n\r\nconst isHaveOppositeType = (cell, neighbour) => {\r\n    if (cell.type !== neighbour.type && !isItEmpty(cell) && !isItEmpty(neighbour) && !isItBorder(neighbour) && !isItBorder(cell)) return true\r\n    else return false;\r\n};\r\n\r\nexport {isItStep, isItBorder, isItEmpty, isHaveSameType, isHaveOppositeType};","import {isHaveOppositeType, isHaveSameType, isItBorder, isItEmpty, isItStep} from './check-types';\r\n\r\nexport default class GameLogic {\r\n\r\n    field = []; //the main field where all the calculations take place\r\n    fieldSize = 0;\r\n    winner = null;\r\n    winSequence = [];\r\n\r\n    constructor(fieldSize) {\r\n        this.field = [];\r\n        this.fieldSize = fieldSize;\r\n    }\r\n\r\n    createGameField = () => {\r\n        const {field, fieldSize} = this;\r\n\r\n        this.winner = null;\r\n        this.winSequence = [];\r\n\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                field[i].push(new EmptyCell(i, j));\r\n            }\r\n        }\r\n        //create border around field\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[0][i] = new BorderCell();\r\n            field[i][0] = new BorderCell();\r\n            field[fieldSize + 1][i] = new BorderCell();\r\n            field[i][fieldSize + 1] = new BorderCell();\r\n        }\r\n        return field;\r\n    };\r\n\r\n\r\n    playerMove = (rowIndex, cellIndex) => {\r\n        const {field} = this;\r\n\r\n        if (!isItStep(field[rowIndex + 1][cellIndex + 1])) {\r\n            field[rowIndex + 1][cellIndex + 1] = new Step('player', cellIndex + 1, rowIndex + 1);\r\n\r\n            for (let i = 0; i < 5; i++) {\r\n                this.calculateNextMove();\r\n            };\r\n\r\n            this.pcMove();\r\n            this.testWin();\r\n            const {winner, winSequence} = this;\r\n            return {field, winner, winSequence}\r\n        } else return null;\r\n\r\n\r\n\r\n    };\r\n\r\n    calculateNextMove = () => {\r\n        const {field, fieldSize} = this;\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const tempCell = field[i][j];\r\n                if (isItStep(tempCell)) {\r\n                    this.searchPotentialIntersections(tempCell)\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    //various variants are computed with a sequence connection\r\n    searchPotentialIntersections = (cell) => {\r\n        const nearCells = this.getArrayNearCells(cell);\r\n        nearCells.forEach((neighbour, numberDirection) => {\r\n            if (isItStep(neighbour)) {\r\n                if (isHaveSameType(cell, neighbour) || isItBorder(neighbour)) {\r\n                    this.recalculationPotentialIdenticalCells(cell, neighbour, numberDirection)\r\n                }\r\n\r\n                if (isHaveOppositeType(cell, neighbour) && cell.stepPotential[numberDirection] <= -10) {\r\n                    this.recalculationPotentialOppositeTypeCells(cell, neighbour, numberDirection)\r\n                }\r\n\r\n            }\r\n        })\r\n\r\n    };\r\n    recalculationPotentialOppositeTypeCells = (cell, neighbour, numberDirection) => {\r\n        const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n        cell.stepPotential[numberDirection] = -100;\r\n        cell.stepPotential[oppositeSides[numberDirection]] = -1;\r\n\r\n\r\n    };\r\n\r\n    recalculationPotentialIdenticalCells = (cell, neighbour, numberDirection) => {\r\n        const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n        const num = cell.stepPotential[numberDirection];\r\n        neighbour.stepPotential[numberDirection] += cell.stepPotential[numberDirection];\r\n        cell.stepPotential[oppositeSides[numberDirection]] += neighbour.stepPotential[oppositeSides[numberDirection]];\r\n        cell.stepPotential[numberDirection] = 0;\r\n        neighbour.stepPotential[oppositeSides[numberDirection]] = 0;\r\n\r\n    };\r\n\r\n\r\n    getArrayNearCells = ({y, x}) => {\r\n        const {field} = this;\r\n        return [\r\n            field[y - 1][x], field[y - 1][x + 1],\r\n            field[y][x + 1], field[y + 1][x + 1],\r\n            field[y + 1][x], field[y + 1][x - 1],\r\n            field[y][x - 1], field[y - 1][x - 1]\r\n        ]\r\n    };\r\n\r\n    getNearCell({x, y}, direction) {\r\n        const {field} = this;\r\n        switch (direction) {\r\n            case 0:\r\n                return field[y - 1][x];\r\n                break;\r\n            case 1:\r\n                return field[y - 1][x + 1];\r\n                break;\r\n            case 2:\r\n                return field[y][x + 1];\r\n                break;\r\n            case 3:\r\n                return field[y + 1][x + 1];\r\n                break;\r\n            case 4:\r\n                return field[y + 1][x];\r\n                break;\r\n            case 5:\r\n                return field[y + 1][x - 1];\r\n                break;\r\n            case 6:\r\n                return field[y][x - 1];\r\n                break;\r\n            case 7:\r\n                return field[y - 1][x - 1];\r\n                break;\r\n            default : return null;\r\n        }\r\n    }\r\n\r\n\r\n    //there is methods for calculation next move for pc\r\n    pcMove = () => {\r\n        const {field} = this;\r\n        let coordsForMove = this.calculateCellPotential('player');\r\n        const coordsForMove2 = this.calculateCellPotential('pc');\r\n        if ((coordsForMove.potential - 1) < coordsForMove2.potential && coordsForMove2.potential >= 1) {\r\n            coordsForMove = coordsForMove2;\r\n        }\r\n        field[coordsForMove.coords.y][coordsForMove.coords.x] = new Step('pc', coordsForMove.coords.x, coordsForMove.coords.y);\r\n    };\r\n\r\n    calculateCellPotential = (type) => {\r\n        const {field, fieldSize} = this;\r\n        //create empty array for cell potential for move\r\n        const resField = [];\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            resField[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                resField[i].push(0);\r\n            }\r\n        }\r\n        //looking for the maximum potential for each cell\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const cell = field[i][j]; //initial cell\r\n\r\n                if (isItStep(cell) && cell.type === type) {\r\n                    const nearCells = this.getArrayNearCells(cell);\r\n                    nearCells.forEach((neighbour, direction) => {\r\n                        if (isItEmpty(neighbour)) {\r\n\r\n                            const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n\r\n                            //for cells that may intersect in the future in one line\r\n                            const nextCell = this.getNearCell(neighbour, direction); //it's the cell which is located one cell away from the initial cell\r\n                            const value1 = cell.stepPotential[direction];\r\n                            let value2 = 0;\r\n                            if (isItStep(nextCell) && !isItBorder(nextCell) && isHaveSameType(cell, nextCell)) {\r\n                                value2 = nextCell.stepPotential[oppositeSides[direction]]\r\n                            }\r\n\r\n                            // for a cell that will has multiple intersections\r\n                            const nextNearCells = this.getArrayNearCells(neighbour);\r\n                            let countDangerousPotentials = 0;\r\n                            nextNearCells.forEach((nextCell, nextCellDirection) => {\r\n                                if (isItStep(neighbour) && !isItBorder(nextCell) && isHaveSameType(cell, nextCell)) {\r\n                                    if (nextCell.stepPotential[oppositeSides[nextCellDirection]] >= 2) {\r\n                                        countDangerousPotentials++;\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            const intersectionPotential = countDangerousPotentials >= 2 ? 3 : cell.stepPotential[direction];\r\n\r\n                            resField[neighbour.y][neighbour.x] = Math.max(resField[neighbour.y][neighbour.x], value1 + value2, intersectionPotential);\r\n                        }\r\n\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.findMax(resField);\r\n    };\r\n\r\n    findMax = (arr) => {\r\n        let max = 0;\r\n        let coords = {};\r\n        let potential = 0;\r\n        arr.forEach((row, rowIndex) => row.forEach((item, colIndex) => {\r\n            if (item > max) {\r\n                max = item;\r\n                coords = {y: rowIndex, x: colIndex};\r\n                potential = max;\r\n            }\r\n        }));\r\n        return {coords, potential};\r\n    };\r\n\r\n    testWin() {\r\n        const {field, fieldSize} = this;\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                this.findCrossesNeighbour(field[i][j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    findCrossesNeighbour(cell) {\r\n        const neighbours = this.getArrayNearCells(cell);\r\n        neighbours.forEach((nearCell, direction) => {\r\n\r\n            if (isHaveSameType(cell, nearCell)) {\r\n                let res = this.oneLineMatch(nearCell, direction, 2, [cell, nearCell]);\r\n\r\n                if (res) {\r\n                    this.winner = res[0].type;\r\n                    this.winSequence = res;\r\n                }\r\n            }\r\n\r\n        })\r\n\r\n    };\r\n\r\n    oneLineMatch = (cell, direction, count, array) => {\r\n        if (count === 5) {\r\n            return array\r\n        }\r\n        else {\r\n            const neighbours = this.getNearCell(cell, direction);\r\n            if (!isHaveSameType(cell, neighbours)) {\r\n                return null\r\n            };\r\n\r\n            return this.oneLineMatch(neighbours, direction, count + 1, [...array, neighbours]);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n//contains info about step player or pc\r\nclass Step {\r\n    constructor(type, x, y) {\r\n        this.type = type;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    stepPotential = [1, 1, 1, 1, 1, 1, 1, 1]; // 8 directions\r\n    type = null;\r\n    x = null;\r\n    y = null;\r\n    win = false;\r\n}\r\n\r\nclass BorderCell {\r\n    type = 'border';\r\n    stepPotential = [-1, -1, -1, -1, -1, -1, -1, -1];\r\n};\r\n\r\nclass EmptyCell {\r\n    constructor(y, x) {\r\n        this.y = y;\r\n        this.x = x;\r\n    }\r\n\r\n    type = 'emptyCell';\r\n    x = null;\r\n    y = null;\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport './game-render.scss';\r\n\r\nexport default class GameRender extends React.Component {\r\n\r\n\r\n    generateKey = () => Math.floor(Math.random() * 1000000);\r\n\r\n    render() {\r\n        const {field} = this.props;\r\n\r\n        if (field === []) return null;\r\n\r\n        const gameField = field.map((row, rowIndex) => {\r\n            return <tr className=\"game-field_row\"\r\n                       key={this.generateKey()}>\r\n                {row.map((cell, cellIndex) => {\r\n                        return <Cell\r\n                            cellData={cell}\r\n                            playerMove={this.props.playerMove}\r\n                            coords={{rowIndex, cellIndex}}\r\n                            key={this.generateKey()}\r\n                        />\r\n                    }\r\n\r\n                )}</tr>\r\n        });\r\n\r\n        return (\r\n\r\n                <div className=\"col-xl-7 col-lg-8  col-md-12\">\r\n                    <table className=\"game-field\">\r\n                        <tbody>\r\n                        {gameField}\r\n                        </tbody>\r\n                    </table>\r\n\r\n\r\n                </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst Cell = ({cellData, playerMove, coords}) => {\r\n    return <td className=\"game-field__cell\"\r\n               onClick={() => playerMove(coords)}>\r\n        {cellData}\r\n    </td>\r\n}","import Game from './game';\r\n\r\nexport default Game;","import React from \"react\";\r\nimport GameLogic from \"./game-logic\";\r\nimport GameRender from \"./game-render\";\r\nimport {isItStep} from \"./check-types\";\r\n\r\nexport default class Game extends React.Component {\r\n    state = {\r\n        field: null,\r\n        fieldSize: 12,\r\n        winner: null,\r\n        winSequence: [],\r\n        gameEnd: false\r\n    };\r\n\r\n    gameLogic = new GameLogic(this.state.fieldSize);\r\n\r\n    componentDidMount = () => {\r\n        this.setState({\r\n            field: this.gameLogic.createGameField()\r\n        })\r\n    };\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n\r\n        if (prevProps.restart === false && this.props.restart === true) {\r\n            this.gameRestart();\r\n        }\r\n    }\r\n\r\n    gameRestart = () => {\r\n\r\n        this.gameLogic = new GameLogic(this.state.fieldSize);\r\n\r\n        this.setState({\r\n            field: this.gameLogic.createGameField(),\r\n            fieldSize: 12,\r\n            winner: null,\r\n            winSequence: [],\r\n            gameEnd: false\r\n        });\r\n\r\n        this.props.restartEnd();\r\n\r\n    };\r\n\r\n    playerMove = ({rowIndex, cellIndex}) => {\r\n\r\n        if (!this.state.gameEnd) {\r\n            const res = this.gameLogic.playerMove(rowIndex, cellIndex);\r\n            if (res) {\r\n                this.setState({\r\n                    field: res.field\r\n                })\r\n\r\n                if (res.winner) {\r\n                    this.setState({\r\n                        winner: res.winner,\r\n                        winSequence: res.winSequence,\r\n                        gameEnd: true\r\n                    });\r\n                    this.props.setWinner(res.winner);\r\n                }\r\n                this.props.changeCountMoves();\r\n            }\r\n\r\n        }\r\n\r\n\r\n    };\r\n\r\n    fieldRender = () => {\r\n        const {fieldSize, winSequence, field} = this.state;\r\n\r\n        if (!field) return [];\r\n\r\n        const copyField = field.slice();\r\n        //mark win sequence\r\n        winSequence.forEach((item) => {\r\n            copyField[item.y][item.x].win = true;\r\n        });\r\n\r\n        const newField = [];\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            newField[i - 1] = [];\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const item = copyField [i][j];\r\n                const markWin = item.win ? 'mark-win' : null;\r\n                if (!isItStep(item)) newField[i - 1].push(' ');\r\n                else {\r\n                    if (item.type === 'player') newField[i - 1].push(<i className={`fa fa-times ${markWin}`}></i>)\r\n                    else newField[i - 1].push(<i className={`fa fa-circle-o ${markWin}`}></i>)\r\n                }\r\n            }\r\n        }\r\n\r\n        return newField;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <GameRender field={this.fieldRender()}\r\n                        playerMove={this.playerMove}/>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n","import App from './app';\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport InfoPanel from \"../info-panel\";\r\nimport Game from \"../game\";\r\n\r\nimport './app.scss';\r\n\r\nexport default class App extends React.Component {\r\n    state = {\r\n        countMoves: 0,\r\n        playerWin: 0,\r\n        playerLose: 0,\r\n        winner: null,\r\n        restart: false\r\n    };\r\n\r\n    changeCountMoves = () => {\r\n        this.setState((state) => ({\r\n            countMoves: state.countMoves + 1\r\n        }))\r\n    };\r\n\r\n    continueAction =() => {\r\n        this.setState({\r\n            countMoves: 0,\r\n            restart:true,\r\n            winner: null\r\n        });\r\n    }\r\n\r\n    setWinner = (win) => {\r\n        if (win==='player') {\r\n            this.setState((state) => ({\r\n                winner: win,\r\n                playerWin: state.playerWin+1\r\n            }))\r\n        } else {\r\n            this.setState((state) => ({\r\n                winner: win,\r\n                playerLose: state.playerLose+1\r\n            }))\r\n        }\r\n    };\r\n\r\n    restartAction = () => {\r\n        this.setState({\r\n            countMoves: 0,\r\n            playerWin: 0,\r\n            playerLose: 0,\r\n            restart:true\r\n        });\r\n\r\n    };\r\n\r\n    restartEnd = () => {\r\n        this.setState({restart:false})\r\n    };\r\n\r\n    render() {\r\n        const {countMoves, playerWin, playerLose, winner,restart} = this.state;\r\n\r\n        const game = <Game changeCountMoves={this.changeCountMoves}\r\n                           setWinner = {this.setWinner}\r\n                           restart = {restart}\r\n                           restartEnd = {this.restartEnd}/>;\r\n\r\n\r\n        const infoPanel = <InfoPanel moves={countMoves}\r\n                                playerWin={playerWin}\r\n                                playerLose={playerLose}\r\n                                winner={winner}\r\n                                restartAction ={this.restartAction}\r\n                                continueAction ={this.continueAction}/>;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h1 className='title col-lg-1'>TicTacToy</h1>\r\n                </div>\r\n\r\n                <div className=\"row justify-content-center\">\r\n                    {game}\r\n                    {infoPanel}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}