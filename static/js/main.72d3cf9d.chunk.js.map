{"version":3,"sources":["components/button/index.js","components/button/button.js","components/buttons/buttons.js","components/winner/winner.js","components/game/game-field.js","components/game/game.js","components/info/info.js","components/app/index.js","components/app/app.js","index.js"],"names":["Button","_ref","children","action","react_default","a","createElement","className","onClick","ButtonContinue","continueAction","components_button","ButtonRestart","_ref2","restartAction","Winner","_this$props","this","props","winner","message","buttons_ButtonContinue","React","Component","GameField","generateKey","Math","floor","random","_this2","field","gameField","map","row","rowIndex","key","cell","cellIndex","game_field_Cell","cellData","playerMove","coords","Cell","winSequence","GamePlay","state","fieldSize","countMoves","gameRestart","_this","setState","fieldRender","createGameField","restartEnd","i","j","push","EmptyCell","BorderCell","isItStep","newField","Object","toConsumableArray","Step","calculateNextMove","changeCountMoves","pcMove","testWin","_this$state","tempCell","searchPotentialIntersections","item","type","isItBorder","isItEmpty","getArrayNearCells","forEach","neighbour","namberDirection","isHaveSameType","recalculationPotentialIdenticalCells","isHaveOppositeType","recalculationPotentialOppositeTypeCells","oppositeSides","stepPotential","y","x","coordsForMove","calculateCellPotential","slice","_this$state2","resField","_loop","direction","nextCell","value1","value2","max","findMax","arr","col","colIndex","oneLineMatch","count","array","neighbours","getNearCell","concat","_this$state3","copyField","console","log","win","markWin","prevProps","prevState","setWinner","restart","_ref3","_this$state4","findCrossesNeighbour","nearCell","res","_this$state5","game_field_GameField","moves","classCallCheck","Info","playerWin","playerLose","winMessage","winner_Winner","buttons_ButtonRestart","App","game","game_GamePlay","info","info_Info","ReactDOM","render","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.72d3cf9d.chunk.js","sourcesContent":["import Button from './button';\r\n\r\nexport default Button;","import React from \"react\";\r\nimport './button.scss';\r\n\r\nconst Button = ({children,action}) => {\r\n\r\n    return (\r\n        <button className=\"button\"\r\n        onClick={() => action()}>\r\n            {children}\r\n        </button>\r\n\r\n    )\r\n};\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"../button\";\r\n\r\nconst ButtonContinue = ({continueAction}) => {\r\n    return(\r\n        <Button action={continueAction}> Continue </Button>\r\n    )\r\n};\r\n\r\nconst ButtonRestart = ({restartAction}) => {\r\n    return(\r\n        <Button action={restartAction}> Restart <i className=\"fa fa-refresh\"></i> </Button>\r\n    )\r\n};\r\n\r\nexport {ButtonContinue,ButtonRestart};","import React from \"react\";\r\nimport {ButtonContinue} from \"../buttons\";\r\n\r\nexport default class Winner extends React.Component{\r\n    render() {\r\n        const {winner,continueAction} = this.props;\r\n        const message = winner==='player'? 'You are a winner!' : 'You lose. Sorry :(';\r\n        return(\r\n            <div className=\"\">\r\n                <div className=\"info winner\">\r\n                    <div className=\"info__block\">\r\n                        <div className=\"info__title\">{message}</div>\r\n                        <div className=\"info__content\">\r\n                            <ButtonContinue continueAction={continueAction}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import './game-field.scss';\r\nimport React from \"react\";\r\nimport GamePlay from \"./game\";\r\nimport Winner from \"../winner/winner\";\r\n\r\nexport default class GameField extends React.Component {\r\n\r\n\r\n    generateKey = () => Math.floor(Math.random() * 1000000);\r\n\r\n    render() {\r\n        const {field, winner} = this.props;\r\n\r\n        if (field === null) return null;\r\n        const winNotification = winner ? <h1>You win!{winner}</h1> : null;\r\n\r\n        const gameField = field.map((row, rowIndex) => {\r\n            return <tr className=\"game-field_row\"\r\n                       key={this.generateKey()}>\r\n                {row.map((cell, cellIndex) => {\r\n                        return <Cell\r\n                            cellData={cell}\r\n                            playerMove={this.props.playerMove}\r\n                            coords={{rowIndex, cellIndex}}\r\n                            key={this.generateKey()}\r\n                        />\r\n                    }\r\n\r\n                )}</tr>\r\n        });\r\n\r\n        return (\r\n\r\n                <div className=\" col-lg-7  col-md-12\">\r\n                    <table className=\"game-field\">\r\n                        <tbody>\r\n                        {gameField}\r\n                        </tbody>\r\n                    </table>\r\n\r\n\r\n                </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst Cell = ({cellData, playerMove, coords,winSequence}) => {\r\n    // const isInSequence = ({rowIndex, cellIndex}) => {\r\n    //     winSequence.forEach( (winCell) => {\r\n    //         if ()\r\n    //     })\r\n    // }\r\n    return <td className=\"game-field__cell\"\r\n               onClick={() => playerMove(coords)}>\r\n        {cellData}\r\n    </td>\r\n}","import React from \"react\";\r\nimport GameField from \"./game-field\";\r\n\r\nexport default class GamePlay extends React.Component {\r\n    state = {\r\n        field: null,\r\n        fieldSize: 12,\r\n        countMoves: 0,\r\n        winner: null,\r\n        winSequence: []\r\n\r\n    };\r\n\r\n    gameRestart = () => {\r\n        this.setState({\r\n            field: null,\r\n            fieldRender: [],\r\n            fieldSize: 12,\r\n            countMoves: 0,\r\n            winner: null,\r\n            winSequence: []\r\n        })\r\n        this.createGameField();\r\n        this.props.restartEnd();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.createGameField();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (!prevState.winner && this.state.winner) {\r\n            this.props.setWinner(this.state.winner);\r\n        }\r\n\r\n        if (prevProps.restart === false && this.props.restart === true) {\r\n            this.gameRestart();\r\n        }\r\n    }\r\n\r\n\r\n    createGameField = () => {\r\n        const {fieldSize} = this.state;\r\n        const field = [];\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                field[i].push(new EmptyCell(i, j));\r\n            }\r\n        }\r\n        //create border\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            field[0][i] = new BorderCell();\r\n            field[i][0] = new BorderCell();\r\n            field[fieldSize + 1][i] = new BorderCell();\r\n            field[i][fieldSize + 1] = new BorderCell();\r\n        }\r\n        this.setState({field});\r\n    };\r\n\r\n\r\n    playerMove = ({rowIndex, cellIndex}) => {\r\n        const {field} = this.state;\r\n        if (!this.isItStep(field[rowIndex + 1][cellIndex + 1])) {\r\n            const newField = [...field];\r\n            newField[rowIndex + 1][cellIndex + 1] = new Step('player', cellIndex + 1, rowIndex + 1);\r\n\r\n            this.setState({\r\n                field: newField,\r\n\r\n            });\r\n\r\n\r\n            for (let i = 0; i < 4; i++) {\r\n                this.calculateNextMove();\r\n            }\r\n            ;\r\n            this.props.changeCountMoves();\r\n            this.pcMove();\r\n            this.testWin('player');\r\n        }\r\n\r\n\r\n    };\r\n\r\n    calculateNextMove = () => {\r\n        const {fieldSize, field} = this.state;\r\n\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const tempCell = field[i][j]\r\n                if (this.isItStep(tempCell)) {\r\n                    this.searchPotentialIntersections(tempCell)\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    isItStep = (item) => {\r\n        if (item.type !== ('emptyCell' || 'border')) return true;\r\n\r\n        return false;\r\n    };\r\n\r\n    isItBorder = (item) => {\r\n        if (item.type === 'border') return true;\r\n\r\n        return false;\r\n    };\r\n\r\n    isItEmpty = (item) => {\r\n        if (item.type === 'emptyCell') return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    searchPotentialIntersections = (cell) => {\r\n        const {field} = this.state;\r\n        const nearCells = this.getArrayNearCells(cell);\r\n        nearCells.forEach((neighbour, namberDirection) => {\r\n            if (this.isItStep(neighbour)) {\r\n                if (this.isHaveSameType(cell, neighbour) || this.isItBorder(neighbour)) {\r\n                    this.recalculationPotentialIdenticalCells(cell, neighbour, namberDirection)\r\n                }\r\n\r\n                if (this.isHaveOppositeType(cell,neighbour)) {\r\n                    this.recalculationPotentialOppositeTypeCells(cell, neighbour, namberDirection)\r\n                }\r\n\r\n            }\r\n        })\r\n\r\n    };\r\n    recalculationPotentialOppositeTypeCells = (cell, neighbour, namberDirection) => {\r\n        const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n        const num = cell.stepPotential[namberDirection];\r\n        neighbour.stepPotential[namberDirection] += -1;\r\n        cell.stepPotential[oppositeSides[namberDirection]] += -1;\r\n        cell.stepPotential[namberDirection] = 0;\r\n        neighbour.stepPotential[oppositeSides[namberDirection]] = 0;\r\n    }\r\n\r\n    recalculationPotentialIdenticalCells = (cell, neighbour, namberDirection) => {\r\n        const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n        const num = cell.stepPotential[namberDirection];\r\n        neighbour.stepPotential[namberDirection] += cell.stepPotential[namberDirection];\r\n        cell.stepPotential[oppositeSides[namberDirection]] += neighbour.stepPotential[oppositeSides[namberDirection]];\r\n        cell.stepPotential[namberDirection] = 0;\r\n        neighbour.stepPotential[oppositeSides[namberDirection]] = 0;\r\n\r\n    }\r\n\r\n    isHaveSameType = (cell, neighbour) => {\r\n        if (cell.type === neighbour.type && !this.isItEmpty(cell) && !this.isItEmpty(neighbour)) return true\r\n        else return false;\r\n    };\r\n\r\n    isHaveOppositeType = (cell, neighbour) => {\r\n        if (cell.type !== neighbour.type && !this.isItEmpty(cell) && !this.isItEmpty(neighbour) && !this.isItBorder(neighbour)) return true\r\n        else return false;\r\n    };\r\n\r\n    getArrayNearCells = ({y, x}) => {\r\n\r\n        const {field} = this.state;\r\n        return [\r\n            field[y - 1][x], field[y - 1][x + 1],\r\n            field[y][x + 1], field[y + 1][x + 1],\r\n            field[y + 1][x], field[y + 1][x - 1],\r\n            field[y][x - 1], field[y - 1][x - 1]\r\n        ]\r\n    };\r\n\r\n    getNearCell({x, y}, direction) {\r\n        const {field} = this.state;\r\n        switch (direction) {\r\n            case 0:\r\n                return field[y - 1][x];\r\n                break;\r\n            case 1:\r\n                return field[y - 1][x + 1];\r\n                break;\r\n            case 2:\r\n                return field[y][x + 1];\r\n                break;\r\n            case 3:\r\n                return field[y + 1][x + 1];\r\n                break;\r\n            case 4:\r\n                return field[y + 1][x];\r\n                break;\r\n            case 5:\r\n                return field[y + 1][x - 1];\r\n                break;\r\n            case 6:\r\n                return field[y][x - 1];\r\n                break;\r\n            case 7:\r\n                return field[y - 1][x - 1];\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    //there is methods for calculation next move for pc\r\n    pcMove = () => {\r\n        const {field} = this.state;\r\n        const coordsForMove = this.calculateCellPotential('player');\r\n        const newField = field.slice();\r\n        field[coordsForMove.y][coordsForMove.x] = new Step('pc', coordsForMove.x, coordsForMove.y);\r\n        this.setState({})\r\n        // const pcPotential = this.calculateCellPotential('pc');\r\n    };\r\n\r\n    calculateCellPotential = (type) => {\r\n        const {fieldSize, field} = this.state;\r\n\r\n        //create array for cell potential for move\r\n        const resField = [];\r\n        for (let i = 0; i < fieldSize + 2; i++) {\r\n            resField[i] = [];\r\n            for (let j = 0; j < fieldSize + 2; j++) {\r\n                resField[i].push(0);\r\n            }\r\n        }\r\n\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const cell = field[i][j]; //temp cell\r\n\r\n                if (this.isItStep(cell) && cell.type === type) {\r\n                    const nearCells = this.getArrayNearCells(cell);\r\n\r\n                    nearCells.forEach((neighbour, direction) => {\r\n                        if (!this.isItStep(neighbour) && !this.isItBorder(neighbour)) {\r\n\r\n                            //for cells that may intersect in the future\r\n                            const oppositeSides = [4, 5, 6, 7, 0, 1, 2, 3];\r\n                            const nextNearCells = this.getArrayNearCells(neighbour);\r\n                            const nextCell = nextNearCells[direction];\r\n                            const value1 = cell.stepPotential[direction];\r\n                            let value2 = 0;\r\n                            if (this.isItStep(nextCell) && !this.isItBorder(nextCell)) {\r\n                                value2 = nextCell.stepPotential[oppositeSides[direction]]\r\n                            }\r\n                            resField[neighbour.y][neighbour.x] = Math.max(resField[neighbour.y][neighbour.x], value1 + value2);\r\n                        }\r\n\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.findMax(resField);\r\n    };\r\n\r\n    findMax = (arr) => {\r\n        const {fieldSize} = this.state;\r\n\r\n        let max = 0;\r\n        let coords = {};\r\n        arr.forEach((row, rowIndex) => row.forEach((col, colIndex) => {\r\n            if (col > max) {\r\n                max = col;\r\n                coords = {y: rowIndex, x: colIndex};\r\n            }\r\n        }));\r\n        return coords;\r\n    };\r\n\r\n    testWin(type) {\r\n        const {field, fieldSize} = this.state;\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                this.findCrossesNeighbour(field[i][j]);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    findCrossesNeighbour(cell) {\r\n        const neighbours = this.getArrayNearCells(cell);\r\n        neighbours.forEach((nearCell, direction) => {\r\n\r\n            if (this.isHaveSameType(cell, nearCell)) {\r\n                let res = this.oneLineMatch(nearCell, direction, 2, [cell, nearCell]);\r\n                if (res) {\r\n                    this.setState({\r\n                        winner: res[0].type,\r\n                        winSequence: res\r\n                    })\r\n                }\r\n            }\r\n\r\n        })\r\n\r\n    };\r\n\r\n    oneLineMatch = (cell, direction, count, array) => {\r\n\r\n        if (count === 5) {\r\n            return array\r\n        }\r\n        else {\r\n            const neighbours = this.getNearCell(cell, direction);\r\n            if (!this.isHaveSameType(cell, neighbours)) {\r\n                return null\r\n            }\r\n            ;\r\n            return this.oneLineMatch(neighbours, direction, count + 1, [...array, neighbours]);\r\n\r\n        }\r\n    }\r\n\r\n    //generate array of game field with values for correct render\r\n    fieldRender = () => {\r\n        const {field, fieldSize, winSequence, winner} = this.state;\r\n\r\n\r\n        if (!field) return [];\r\n        //mark win sequence\r\n        const copyField = field.slice();\r\n        // console.log(copyField);\r\n\r\n        winSequence.forEach((item) => {\r\n            console.log('hah', copyField[item.y][item.x].win);\r\n            copyField[item.y][item.x].win = true;\r\n        });\r\n\r\n        const newField = [];\r\n        for (let i = 1; i < fieldSize + 1; i++) {\r\n            newField[i - 1] = [];\r\n            for (let j = 1; j < fieldSize + 1; j++) {\r\n                const item = copyField [i][j];\r\n                const markWin = item.win ? 'mark-win' : null;\r\n                if (!this.isItStep(item)) newField[i - 1].push(' ');\r\n                else {\r\n                    if (item.type === 'player') newField[i - 1].push(<i className={`fa fa-times ${markWin}`}></i>)\r\n                    else newField[i - 1].push(<i className={`fa fa-circle-o ${markWin}`}></i>)\r\n                }\r\n            }\r\n        }\r\n\r\n        return newField;\r\n\r\n    }\r\n\r\n    render() {\r\n        const {countMoves, winner, winSequence} = this.state;\r\n        const {setWinner} = this.props;\r\n\r\n        return (\r\n            <GameField field={this.fieldRender()}\r\n                       playerMove={this.playerMove}\r\n                       moves={countMoves}\r\n                       winner={winner}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n//contanes info about step player or pc\r\nclass Step {\r\n    constructor(type, x, y) {\r\n        this.type = type;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    stepPotential = [1, 1, 1, 1, 1, 1, 1, 1]; // 8 directions\r\n    type = null;\r\n    x = null;\r\n    y = null;\r\n    win = false;\r\n}\r\n\r\nclass BorderCell {\r\n    type = 'border';\r\n    stepPotential = [-1, -1, -1, -1, -1, -1, -1, -1];\r\n};\r\n\r\nclass EmptyCell {\r\n    constructor(y, x) {\r\n        this.y = y;\r\n        this.x = x;\r\n    }\r\n\r\n    type = 'emptyCell';\r\n    x = null;\r\n    y = null;\r\n\r\n}\r\n\r\n","import './info.scss';\r\nimport React from \"react\";\r\nimport Winner from \"../winner/winner\";\r\nimport {ButtonRestart} from \"../buttons\";\r\n\r\nexport default class Info extends React.Component {\r\n    state = {\r\n        moves: 0,\r\n\r\n    }\r\n\r\n    render() {\r\n        const {restartAction,continueAction,countMoves,playerWin,playerLose,winner} = this.props;\r\n\r\n        const winMessage = winner? <Winner winner={winner}\r\n                                           continueAction = {continueAction}/> : null;\r\n        return (\r\n            <div className='col-lg-4  col-md-12'>\r\n\r\n                {winMessage}\r\n\r\n                <ButtonRestart restartAction = {restartAction}/>\r\n\r\n                <div className=\"info__stats\">\r\n                    <div className=\"info\">\r\n                        <div className=\"info__block\">\r\n                            <div className=\"info__title\">Moves</div>\r\n                            <div className=\"info__content\">{this.props.moves}</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"info\">\r\n                        <div className=\"info__block\">\r\n                            <div className=\"info__title\">Score</div>\r\n                            <div className=\"info__content\">{playerWin} : {playerLose}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"info info--rules\">\r\n                    <div className=\"info__block\">\r\n                        <div className=\"info__title\">Rules</div>\r\n                        <div className=\"info__content\">\r\n                            <div>1. You have field 15x15</div>\r\n                            <div>2. You need to collect 5 crosses in a row (including vertical and diagonal axes)</div>\r\n                            <div>3. AI will disturb you and seek to collect their 5 crosses</div>\r\n                            <div>4. So go and win!</div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import App from './app';\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport './app.scss';\r\nimport '../game/game'\r\nimport Game from \"../game/game\";\r\nimport Info from \"../info/info\";\r\nimport Button from \"../button/button\";\r\nimport {ButtonContinue, ButtonRestart} from \"../buttons/buttons\";\r\n\r\nexport default class App extends React.Component {\r\n    state = {\r\n        countMoves: 0,\r\n        playerWin: 0,\r\n        playerLose: 0,\r\n        winner: null,\r\n        restart: false\r\n    };\r\n\r\n    changeCountMoves = () => {\r\n        this.setState((state) => ({\r\n            countMoves: state.countMoves + 1\r\n        }))\r\n    };\r\n\r\n    continueAction =() => {\r\n        this.setState({\r\n            countMoves: 0,\r\n            restart:true,\r\n            winner: null\r\n        });\r\n    }\r\n    restartAction = () => {\r\n        this.setState({\r\n            countMoves: 0,\r\n            playerWin: 0,\r\n            playerLose: 0,\r\n            restart:true\r\n        });\r\n\r\n    };\r\n\r\n    restartEnd = () => {\r\n        this.setState({restart:false})\r\n    }\r\n\r\n    setWinner = (win) => {\r\n        if (win==='player') {\r\n            this.setState((state) => ({\r\n                winner: win,\r\n                playerWin: state.playerWin+1\r\n            }))\r\n        } else {\r\n            this.setState((state) => ({\r\n                winner: win,\r\n                playerLose: state.playerLose+1\r\n            }))\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {countMoves, playerWin, playerLose, winner,restart} = this.state;\r\n        const game = <Game changeCountMoves={this.changeCountMoves}\r\n                           setWinner = {this.setWinner}\r\n                            restart = {restart}\r\n                            restartEnd = {this.restartEnd}/>;\r\n        const info = <Info moves={countMoves}\r\n                           playerWin={playerWin}\r\n                           playerLose={playerLose}\r\n                           winner={winner}\r\n                           restartAction ={this.restartAction}\r\n                           continueAction ={this.continueAction}/>\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row \">\r\n                    <h1 className='title col-lg-1'>TicTacToy</h1>\r\n                </div>\r\n\r\n                <div className=\"row justify-content-center\">\r\n                    {game}\r\n                    {info}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}